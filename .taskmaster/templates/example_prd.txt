<context>
# Overview  
Bluelight-Hub ist eine moderne Einsatzunterstützungsanwendung für Blaulichtorganisationen, die verschiedene kritische Funktionen in einer einheitlichen, mobilen und offline-fähigen Plattform integriert. Die Anwendung zielt darauf ab, Einsatzkräfte und Einsatzleitungen bei der Koordination, Dokumentation und Kommunikation während Einsätzen zu unterstützen.

# Core Features  
## Einsatzmanagement
- Manuelle Anlage und Verwaltung von Einsätzen im Führungskraftwagen (FüKW)
- Dynamische UI-Transformation zwischen Normalbetrieb und Einsatzmodus
- Statusverfolgung und Ressourcenzuweisung

## Einsatztagebuch (ETB)
- Chronologische Dokumentation von Ereignissen, Maßnahmen und Entscheidungen
- Kategorisierung und Filterung von Einträgen
- Export-Funktionen für Nachbearbeitung und Dokumentation
- Unterstützung für Anhänge wie Bilder und Dokumente

## Lagekarten
- Visualisierung der Einsatzlage mit taktischen Zeichen
- Positionierung von Ressourcen auf Karten
- Zeichenwerkzeuge für Bereiche und Routen
- Layer-Management für verschiedene Informationsebenen

## Ressourcenmanagement
- Verwaltung und Statusverfolgung von Personal, Fahrzeugen und Material
- Zuweisung zu Einsatzabschnitten
- Verfügbarkeitsanzeige und Alarmierung
- Templatebasierte Ressourcenkonfiguration

## Kommunikation
- Koordination zwischen FüKW und Einsatzkräften
- Integration mit Digitalfunk (TETRA) für Statusmeldungen
- Dokumentation von Kommunikationsvorgängen
- Echtzeit-Benachrichtigungen für wichtige Ereignisse

## Konnektivitätsresilienz
- Funktionalität in verschiedenen Verbindungsszenarien:
  - Lokaler Modus (FüKW-verbunden)
  - Online-Modus (Vollständige Internetverbindung)
  - Autonomer Modus (Offline-Fähigkeit, für zukünftige Versionen geplant)
- Daten-Synchronisation bei Wiederverbindung
- Konsistente Benutzeroberfläche mit kontextbezogenen Anpassungen

# User Experience  
## Benutzergruppen
- Einsatzleiter: Führungsverantwortliche mit Zugriff auf alle Funktionen
- FüKW-Personal: Unterstützungskräfte im Führungskraftwagen
- Einsatzkräfte: Personal im Feld mit eingeschränktem Funktionsumfang
- Administratoren: IT-Verantwortliche für Konfiguration und Wartung

## Schlüssel-Workflows
- Einsatzanlage: Formular-basierter Prozess mit Template-Auswahl
- ETB-Führung: Kontinuierliche Dokumentation mit Filterung und Suche
- Ressourceneinsatz: Zuweisung und Verfolgung von Ressourcen
- Lagekartennutzung: Platzierung taktischer Zeichen und Positionsverfolgung
- Kommunikation: Austausch von Statusmeldungen und Anweisungen

## UI/UX-Konzepte
- Progressive Disclosure: Schrittweise Enthüllung von Komplexität
- Kontextbewusstsein: Anpassung der UI an Einsatzsituationen
- Visuelle Hierarchie: Hervorhebung kritischer Informationen
- Konsistente Designsprache über alle Module
- Hohe Zugänglichkeit für Einsatz unter schwierigen Bedingungen
- Dynamische UI-Transformation bei Wechsel in den Einsatzmodus
</context>
<PRD>
# Technical Architecture  
## Systemkomponenten
- **Frontend**: React mit TypeScript, Atomic Design für UI-Komponenten
  - Atoms, Molecules, Organisms, Templates, Pages
  - State Management mit Zustand
  - Routing und API-Services für Backend-Kommunikation
  - Offline-Fähigkeit durch lokale Datenspeicherung

- **Backend**: NestJS mit modularer Architektur
  - App Module als Hauptmodul
  - Auth Module für Authentifizierung
  - Einsatz Module für Einsatzverwaltung
  - Ressource Module für Personal, Fahrzeuge, Material
  - ETB Module für Einsatztagebuch
  - Health Module für Systemüberwachung
  - Common Module für gemeinsame Funktionalitäten
  - Config Module für Konfigurationen

- **Shared Package**: Gemeinsame Typendefinitionen, DTOs, Utilities

## Datenmodelle
- **Einsatz**: ID, Bezeichnung, Einsatzart, Status, Zeitstempel, Abschnitte
- **EinsatzAbschnitt**: ID, Bezeichnung, Einsatz-Referenz, Verantwortlicher
- **ETB-Eintrag**: ID, laufende Nummer, Zeitstempel, Autor, Kategorie, Beschreibung
- **Ressourcen**: Personal, Fahrzeuge, Material mit Status und Zuweisungen
- **Benutzer**: ID, Rolle, Berechtigungen, Authentifizierungsdaten

## APIs und Integrationen
- RESTful API für Datenaustausch zwischen Frontend und Backend
- WebSocket für Echtzeit-Updates und Benachrichtigungen
- Digitalfunk-Integration über TETRA-Adapter (unidirektional)
- Export-Schnittstellen für PDF, CSV und standardisierte Formate

## Infrastrukturanforderungen
- **Datenbank**: SQLite für lokale Speicherung
- **Server**: Node.js-basierter NestJS-Server
- **Netzwerk**: Unterstützung für lokales Netzwerk im FüKW und Internet
- **Clients**: Desktop und mobile Geräte mit moderner Browser-Unterstützung

# Development Roadmap  
## MVP-Anforderungen (Phase 1)
- Grundlegende Benutzeroberfläche mit Atomic Design-Komponenten
- Einsatzmanagement: Anlage, Statusverfolgung, Grunddaten
- Einfaches Einsatztagebuch (ETB) mit Basisfunktionen
- Lokaler Verbindungsmodus (FüKW-verbunden)
- Authentifizierung und Benutzerverwaltung
- Einfache Ressourcenverwaltung (Personal, Fahrzeuge)
- Basisintegration mit Digitalfunk für Statusmeldungen

## Erweiterte Funktionen (Phase 2)
- Komplexes ETB mit fortgeschrittener Filterung und Anhängen
- Umfassende Lagekarte mit taktischen Zeichen
- Erweiterte Ressourcenverwaltung mit Templates
- Vollständiger Verbindungsmodus (Online) mit Backend-Synchronisation
- Kommunikationsmodul für Nachrichten und Benachrichtigungen
- Export- und Importfunktionen für Daten
- Erweiterte Benutzeroberfläche mit kontextbezogenen Anpassungen

## Zukunftsentwicklung (Phase 3)
- Autonomer Verbindungsmodus (Offline-Fähigkeit)
- Erweiterte Synchronisationsfunktionen mit Konfliktlösung
- Fortgeschrittene Analysen und Berichterstattung
- Integration mit weiteren externen Systemen
- Mobile Apps für iOS und Android
- KI-gestützte Entscheidungsunterstützung
- Erweitertes Kartenmaterial und GIS-Funktionen

# Logical Dependency Chain
## Grundlegender Aufbau (Fundament)
1. Basisinfrastruktur: Monorepo-Setup mit Frontend, Backend und Shared Package
2. Authentifizierungssystem: Benutzeranmeldung und Rollenverwaltung
3. Datenmodelle: Kernentitäten für Einsatz, ETB, Ressourcen

## Kernsystem (MVP)
4. Einsatzmanagement: Grundfunktionen für Einsatzanlage und -verfolgung
5. Einfaches ETB: Grundlegende Dokumentationsfunktionen
6. Einfache Ressourcenverwaltung: Personal- und Fahrzeugzuweisung
7. Benutzerschnittstelle: Atomic Design-Komponenten und UI-Transformation

## Erweiterung
8. Lagekarte: Visualisierung der Einsatzlage
9. Kommunikation: Integration mit Digitalfunk und Nachrichtensystem
10. Erweiterte ETB-Funktionen: Filterung, Anhänge, Exportfunktionen
11. Konnektivitätsmanagement: Online/Offline-Modi

# Risks and Mitigations  
## Technische Herausforderungen
- **Konnektivitätsresilienz**: Implementierung robuster Offline-Funktionalität
  *Mitigation*: Entwicklung eines lokalen Speicherungssystems mit Queue-basierter Synchronisation

- **Echtzeit-Synchronisation**: Gewährleistung konsistenter Daten über mehrere Clients
  *Mitigation*: Verwendung von Event-Sourcing und CQRS-Pattern für robuste Datenkonsistenz

- **Integration mit Digitalfunk**: Komplexe Schnittstellen zu proprietären Systemen
  *Mitigation*: Entwicklung einer Adapterschicht mit klaren Schnittstellen

## MVP-Definition
- **Fokus auf Kernfunktionen**: Gefahr der Feature-Überladung
  *Mitigation*: Strenge Priorisierung basierend auf Benutzerinterviews, Fokus auf Kernnutzen

- **Balance zwischen Einfachheit und Funktionalität**: Zu einfach vs. zu komplex
  *Mitigation*: Iteratives Prototyping mit Nutzerfeedback, kontinuierliche Anpassung

## Ressourcenbeschränkungen
- **Mobile Performance**: Sicherstellen guter Performance auf mobilen Geräten
  *Mitigation*: Optimierungsstrategie, Begrenzung der Datenmenge, effiziente Rendering-Techniken

- **Offline-Datenspeicherung**: Begrenzter lokaler Speicherplatz
  *Mitigation*: Intelligente Datenpriorisierung, selektive Synchronisation

# Appendix  
## Technische Spezifikationen
- Frontend: React 18+, TypeScript 4.5+, Zustand für State Management
- Backend: NestJS 9+, TypeScript 4.5+, Prisma als ORM
- Shared Package: Automatisch generierte OpenAPI-Clients
- Datenbank: SQLite für lokale Speicherung
- API: RESTful mit JSON, WebSocket für Echtzeit-Updates
- UI-Framework: Antd und Tailwind CSS für Styling
- Kartendienst: Mapbox für Kartenvisualisierung

## Architekturentscheidungen
- Atomic Design für UI-Komponenten
- Modulare NestJS-Architektur mit klarer Trennung der Verantwortlichkeiten
- Event-Sourcing für ETB und kritische Funktionen
- CQRS-Pattern für optimierte Lese- und Schreiboperationen
- Monorepo-Struktur für vereinfachte Zusammenarbeit
- Mobile-First Design für Feldtauglichkeit
</PRD>