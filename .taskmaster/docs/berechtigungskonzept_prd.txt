<context>
# Projektübersicht
**Vision**: Ein strukturiertes Berechtigungssystem mit verwalteten Bearbeitern und einem sicheren Admin-Bereich. Bearbeiter werden vom Admin angelegt und können sich ohne Passwort anmelden.

**Zielgruppe**: 
- Bearbeiter: Vom Admin verwaltete Nutzer, die sich nur mit Benutzernamen anmelden
- Administratoren: Vollzugriff mit Passwort-Authentifizierung und Benutzerverwaltung

**Business Value**: 
- Kontrollierte Benutzerverwaltung durch Admin
- Einfacher Zugang für Bearbeiter (kein Passwort nötig)
- Sichere Admin-Funktionen mit Passwortschutz
- Initiale Admin-Einrichtung für sofortigen Start

# Kernfunktionen
1. **Initiale Admin-Erstellung**: Automatisch beim ersten Start mit Passwort aus .env oder zufällig generiert
2. **Bearbeiter-Verwaltung**: Admin kann Bearbeiter anlegen/verwalten
3. **Bearbeiter-Login**: Anmeldung nur mit vorhandenem Benutzernamen (ohne Passwort)
4. **Admin-Authentifizierung**: Passwort-geschützter Zugang zu Admin-Funktionen
5. **Fenster-Management**: Separate Fenster für verschiedene Bereiche (Tauri)

# Benutzererfahrung
- **App-Start**: Ansprechendes Login-Fenster als erster Kontaktpunkt
- **Erster Start**: Admin wird automatisch erstellt, Passwort wird angezeigt/konfiguriert
- **Bearbeiter-Workflow**: Einfache Anmeldung mit vom Admin erstelltem Benutzernamen
- **Admin-Workflow**: Kann als Bearbeiter arbeiten, bei Bedarf Admin-Rechte aktivieren
- **Klare Trennung**: Admin-Bereich in separatem Fenster/Tab
</context>

<PRD>
# Technische Architektur

## Tech Stack
- Frontend: React + TypeScript (bereits vorhanden)
- Backend: NestJS (bereits vorhanden)
- Desktop: Tauri (Window Management)
- State Management: Zustand oder Context API
- Auth: JWT für Sessions
- Database: PostgreSQL mit Prisma (bereits vorhanden)

## Datenmodelle
```typescript
// Prisma Schema
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  isAdmin   Boolean  @default(false)
  password  String?  // Nur für Admins
  createdAt DateTime @default(now())
  createdBy String?  // Admin der den User erstellt hat
}

// Frontend Types
interface User {
  id: string;
  username: string;
  isAdmin: boolean;
}

interface AuthState {
  currentUser: User | null;
  isAdminAuthenticated: boolean;
  adminToken?: string;
}
```

## API Endpoints (Backend)
- POST /api/auth/login - Bearbeiter-Login (nur Username)
- POST /api/auth/admin/login - Admin-Login (Username + Passwort)
- POST /api/auth/admin/verify - Admin-Token verifizieren
- GET /api/users - Alle Bearbeiter abrufen (Admin only)
- POST /api/users - Neuen Bearbeiter anlegen (Admin only)
- DELETE /api/users/:id - Bearbeiter löschen (Admin only)

## Initiale Admin-Erstellung
```typescript
// Bei Server-Start
if (await prisma.user.count() === 0) {
  const initialPassword = process.env.ADMIN_INITIAL_PASSWORD || generateRandomPassword();
  
  await prisma.user.create({
    data: {
      username: 'admin',
      isAdmin: true,
      password: await hash(initialPassword)
    }
  });
  
  console.log(`
    ========================================
    Initial Admin created!
    Username: admin
    Password: ${initialPassword}
    ========================================
  `);
}
```

# Entwicklungs-Roadmap

## MVP (Phase 1) - Version 1.0

1. **Backend Auth-System**
   - Initiale Admin-Erstellung beim Start
   - User-Model mit Admin-Flag
   - JWT-basierte Sessions
   - Auth-Endpoints implementieren

2. **Frontend Auth-State**
   - AuthContext/Store einrichten
   - Session-Management
   - Protected Routes

3. **Login-Fenster (UI/UX)**
   - Modernes, ansprechendes Design als erster Eindruck
   - Branding/Logo prominent platziert
   - Benutzerauswahl (stilvoller Dropdown oder Karten-Layout)
   - Keine Passwort-Eingabe für normale Bearbeiter
   - Smooth Transitions und Animationen
   - Nach Login: Eleganter Übergang zum Hauptfenster
   - Responsive für verschiedene Bildschirmgrößen

4. **Admin-Authentifizierung**
   - Admin-Button im Hauptfenster
   - Passwort-Dialog bei Klick
   - JWT-Token für Admin-Session

5. **Window Management**
   - Tauri: Neues Fenster für Admin-Bereich
   - Web: Neuer Tab oder Modal

6. **Admin-Dashboard (Basis)**
   - Benutzer-Liste anzeigen
   - Neuen Bearbeiter anlegen
   - Bearbeiter löschen

## Phase 2 - Erweiterte Features
- Bearbeiter-Rechte granular verwalten
- Admin-Passwort ändern
- Mehrere Admins unterstützen
- Audit-Log für Admin-Aktionen

## Phase 3 - Enterprise Features
- LDAP/AD Integration
- 2FA für Admins
- Session-Management (aktive Sessions anzeigen/beenden)

# Logische Abhängigkeitskette

1. **Database Schema** → User-Model mit Admin-Flag
2. **Initial Admin Creation** → Server-Start-Logik
3. **Backend Auth** → JWT-Generation und Validierung
4. **API Endpoints** → Login und User-Management
5. **Frontend Auth State** → Context/Store für User-Info
6. **Login Component** → User-Auswahl Interface
7. **Protected Routes** → Hauptanwendung nach Login
8. **Admin Auth Dialog** → Passwort-Eingabe für Admin
9. **Window Manager** → Tauri/Web Abstraktion
10. **Admin Dashboard** → User-Management UI

# Risiken und Gegenmaßnahmen

## Technische Risiken
- **Initial-Passwort verloren**: Admin ausgesperrt
  → CLI-Command für Passwort-Reset implementieren
- **JWT-Token-Sicherheit**: Token könnte gestohlen werden
  → Kurze Laufzeit, Refresh-Token, HttpOnly Cookies

## Business Risiken
- **Kein Bearbeiter angelegt**: Niemand kann sich anmelden
  → Default-Bearbeiter bei Bedarf anlegen
- **Admin löscht sich selbst**: System ohne Admin
  → Letzten Admin nicht löschbar machen

# Erfolgskriterien

## MVP Success Metrics
- Initial-Admin wird zuverlässig erstellt
- Bearbeiter können sich ohne Passwort anmelden
- Admin kann neue Bearbeiter anlegen
- Fenster-Management funktioniert plattformübergreifend
- Keine Sicherheitslücken im Auth-System

## User Stories

**Als System** möchte ich beim ersten Start automatisch einen Admin-User erstellen, damit sofort gearbeitet werden kann.

**Als Bearbeiter** möchte ich mich nur mit meinem Benutzernamen anmelden, damit ich schnell arbeiten kann.

**Als Administrator** möchte ich neue Bearbeiter anlegen können, damit kontrolliert wird, wer Zugang hat.

**Als Administrator** möchte ich mich mit Passwort authentifizieren, um auf Admin-Funktionen zuzugreifen.

**Als Administrator** möchte ich das Admin-Dashboard in einem separaten Fenster öffnen, damit ich übersichtlich arbeiten kann.
</PRD>