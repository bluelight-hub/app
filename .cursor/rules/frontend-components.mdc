---
description: Regeln zur Organisation und Entwicklung von React-Komponenten (Atomic Design)
globs: packages/frontend/src/components/**/*.tsx
---
<rule>
  name: frontend_components
  description: Standards zur Organisation und Entwicklung von React-Komponenten basierend auf Atomic Design.
  filters:
    - type: file_path
      pattern: "packages/frontend/src/components/.*\\.tsx?$"
    - type: event
      pattern: "file_create"
  actions:
    - type: suggest
      message: |
        **Richtlinien für neue React-Komponenten:**

        1. **Component Location Structure:**
           ```
           src/components/
           ├── atoms/        # Grundbausteine (Buttons, Inputs, Labels etc.)
           ├── molecules/    # Gruppen von Atomen (Formulare, Suchleisten etc.)
           ├── organisms/    # Komplexe UI-Sektionen (Header, Formulare etc.)
           ├── templates/    # Seitenlayouts und -strukturen
           └── pages/        # Vollständige Seiten, die andere Komponenten kombinieren
           ```

        2. **Component File Structure:**
           - Eine Komponente pro Datei.
           - Dateiname entspricht dem Komponentennamen (PascalCase).
           - Interface für Props einbinden.
           - Komponente als Default exportieren.
           - Dokumentation der Komponente hinzufügen.

        3. **Test-Anforderungen:**
           - Jede Komponente muss eine Testdatei (ComponentName.test.tsx) haben.
           - Testdatei im selben Verzeichnis wie die Komponente ablegen.
           - Mindestanforderungen: Unit-, Integrations- und Snapshot-Tests.

        4. **Best Practices:**
           - Komponenten klein und fokussiert halten (~max 150 Zeilen).
           - TypeScript für Typensicherheit nutzen.
           - Prop-Validierung implementieren.
           - Single Responsibility Principle einhalten.
           - Komposition statt Vererbung verwenden.
           - Error Boundaries implementieren, wo nötig.
           - React Hooks effizient einsetzen.
           - Props und Verhalten dokumentieren.

        **Beispiel:**
        ```tsx
        interface ButtonProps {
          label: string;
          onClick: () => void;
          variant?: 'primary' | 'secondary';
        }

        /**
         * Primäre UI-Komponente für Benutzereingaben
         */
        const Button: React.FC<ButtonProps> = ({ label, onClick, variant = 'primary' }) => (
          <button className={`btn btn-${variant}`} onClick={onClick}>
            {label}
          </button>
        );

        export default Button;
        ```
  metadata:
    priority: high
    version: 1.0
    tags:
      - frontend
      - react
      - components
      - atomic-design
</rule>
