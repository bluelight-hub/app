---
description: Richtlinien für das Management des Application State mit Zustand
globs: ["packages/frontend/src/stores/**/*.ts"]
---
<rule>
  name: frontend_state
  description: Standards für das State Management mit Zustand.
  filters:
    - type: file_path
      pattern: "packages/frontend/src/stores/.*\\.ts$"
    - type: event
      pattern: "file_create"
  actions:
    - type: suggest
      message: |
        **Richtlinien für Zustand:**

        1. **Store-Organisation:**
           ```
           src/stores/
           ├── index.ts              # Re-export aller Stores
           ├── useAuthStore.ts       # Authentifizierungsstatus
           ├── useSettingsStore.ts   # App-Einstellungen
           └── useDataStore.ts       # Domänenspezifische Daten
           ```

        2. **Store-Struktur:**
           - Ein Store pro Domänenkonzept.
           - Stores sollten klein und fokussiert sein.
           - TypeScript-Interfaces für State-Typen verwenden.
           - Selektoren für abgeleitete States implementieren.
           ```tsx
           // Beispiel: stores/useAuthStore.ts
           import { create } from 'zustand';
           import { devtools } from 'zustand/middleware';

           interface AuthState {
             user: User | null;
             isAuthenticated: boolean;
             login: (credentials: Credentials) => Promise<void>;
             logout: () => void;
           }

           export const useAuthStore = create<AuthState>()(
             devtools(
               (set) => ({
                 user: null,
                 isAuthenticated: false,
                 login: async (credentials) => {
                   // Implementierung
                   set({ user, isAuthenticated: true });
                 },
                 logout: () => set({ user: null, isAuthenticated: false }),
               }),
               { name: 'auth-store' }
             )
           );
           ```

        3. **State-Nutzung in Komponenten:**
           - Selektive State-Abonnements nutzen.
           - Middleware für Nebenwirkungen einsetzen.
           - Devtools in der Entwicklung verwenden.
           ```tsx
           const UserProfile = () => {
             const user = useAuthStore((state) => state.user);
             const logout = useAuthStore((state) => state.logout);

             return (
               <div>
                 <h2>{user?.name}</h2>
                 <Button onClick={logout}>Logout</Button>
               </div>
             );
           };
           ```

        4. **Best Practices:**
           - State normalisiert halten.
           - Middleware für Persistenz einsetzen.
           - Fehlerbehandlung implementieren.
           - Berechnete Werte mit Selektoren nutzen.
           - Interfaces und Aktionen dokumentieren.
  metadata:
    priority: high
    version: 1.0
    tags:
      - frontend
      - state-management
      - zustand
</rule>
