---
description: Generierung von präzisen Commit-Messages basierend auf Änderungen
globs: 
---
<rule>
  name: commit_rules
  description: Erzeugt Commit-Messages nach den vorgegebenen Konventionen.
  filters:
    - type: event
      pattern: "commit_message_generate"
  actions:
    - type: suggest
      message: |
        # Commit Message Standards

        ## Änderungen analysieren

        Verwende `git --no-pager diff` um die Änderungen ohne Pager anzuzeigen:
        ```bash
        git --no-pager diff  # Zeigt uncommittete Änderungen
        git --no-pager diff --staged  # Zeigt bereits gestagete Änderungen
        ```

        ## Format

        ```
        <emoji>(<context>): <kurze, prägnante Nachricht>

        <zusätzliche Beschreibung, falls nötig>

        <optional: 💥 BREAKING CHANGE>
        ```

        ## Mehrzeilige Commit Messages

        Für mehrzeilige Commit-Messages printf verwenden und immer die Datei `commit-message.txt` nutzen:

        ```bash
        # Erstelle temporäre Datei mit der Commit Message
        printf "%s\n\n%s\n%s\n%s\n" \
          "✨(frontend): Neue Feature Implementierung" \
          "- Punkt 1" \
          "- Punkt 2" \
          "- Punkt 3" > commit-message.txt

        # Commit mit der Datei
        git add .
        git commit -F commit-message.txt
        rm commit-message.txt
        ```

        WICHTIG: Die Datei `commit-message.txt` muss nach jedem Commit gelöscht werden und sollte in der `.gitignore` stehen.

        ## Emoji & Versioning

        ### Major (Breaking Changes)
        - 💥 Breaking Change
        - 🎉 Initial Commit

        ### Minor
        - ✨ Neues Feature
        - 🚀 Verbesserungen & Deployments

        ### Patch
        - 🐛 Bugfixes
        - 🚑 Dringender Hotfix
        - 🔒 Sicherheitsverbesserung
        - 🧹 Code-Aufräumarbeiten
        - ♻️ Refactoring
        - 🔧 Tooling & Konfiguration
        - 📦 Dependency Updates
        - 📝 Dokumentation
        - 💄 UI/UX Verbesserungen
        - ⚡ Performance
        - 🗑 Entfernte Features
        - 🛠 Build/CI

        ## Kontext (<context>)
        - `frontend`: Frontend-spezifische Änderungen
        - `backend`: Backend-spezifische Änderungen
        - `shared`: Änderungen in geteiltem Code
        - `ci`: CI/CD Pipeline Änderungen
        - `deps`: Dependency Updates
        - `docs`: Dokumentationsänderungen
        - `test`: Test-bezogene Änderungen
        - `config`: Konfigurationsänderungen

        ## Commit-Analyse
        1. Geänderte Dateien identifizieren
        2. Art der Änderungen bestimmen
        3. Potenzielle Breaking Changes notieren
        4. Betroffenen Kontext identifizieren

        ## Beispiele

        ```
        ✨(frontend): Neue Kartenfunktion für Einsatzplanung

        Implementiert eine interaktive Karte zur besseren Visualisierung von Einsatzorten.
        ```

        ```
        🐛(backend): Korrigiere Fehler in der Authentifizierung

        Behebt einen Bug, der zu gelegentlichen 401-Fehlern führte.
        ```

        ```
        💥(shared): Überarbeitung der API-Schnittstelle

        BREAKING CHANGE: Die Struktur der Einsatz-DTO wurde grundlegend geändert.
        Alte Clients müssen aktualisiert werden.
        ```
  metadata:
    priority: high
    version: 1.0
</rule>
