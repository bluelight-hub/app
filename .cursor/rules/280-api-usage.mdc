---
description: 
globs: packages/frontend/src/**/*.tsx,packages/frontend/src/**/*.ts
alwaysApply: false
---

# Frontend API Usage

## Context
- Gilt für alle API-Aufrufe im Frontend
- Betrifft die Verwendung der generierten API-Clients aus @bluelight-hub/shared/client
- Standardisiert die Fehlerbehandlung und Statusverwaltung

## Requirements

1. **API-Client-Verwendung**
   - Nutze IMMER die generierten API-Clients aus `@bluelight-hub/shared/client`
   - Importiere APIs über die zentrale `api`-Instanz aus `src/api/index.ts`
   - KEINE direkten Fetch-Aufrufe oder axios-Verwendung

2. **React Query Integration**
   - Verwende `@tanstack/react-query` für API-Aufrufe
   - Definiere QueryKeys in separaten Konstanten
   - Setze sinnvolle Refetch-Intervalle für Status-Endpunkte

3. **Fehlerbehandlung**
   - Implementiere try-catch Blöcke für async/await Aufrufe
   - Logge Fehler mit aussagekräftigen Meldungen
   - Zeige Benutzerfeedback bei API-Fehlern

4. **Status-Handling**
   - Verwalte Loading-States über React Query
   - Zeige Lade-Indikatoren während API-Aufrufen
   - Implementiere Error-Boundaries für API-Fehler

5. **Typisierung**
   - Nutze die generierten TypeScript-Typen aus dem Client
   - KEINE `any`-Typen in API-Responses
   - Definiere Interface-Erweiterungen wenn nötig

## Examples

<example>
// Korrekte API-Verwendung
import { api } from '../api';
import { useQuery } from '@tanstack/react-query';

export const HealthCheck = () => {
  const { data, isError, isLoading } = useQuery({
    queryKey: ['health'],
    queryFn: () => api.health.healthControllerCheck(),
    refetchInterval: 30000,
  });

  if (isLoading) return <LoadingSpinner />;
  if (isError) return <ErrorMessage />;

  return <StatusDisplay status={data.status} />;
};
</example>

<example type="invalid">
// Falsche API-Verwendung
const checkHealth = async () => {
  const response = await fetch('/api/health');
  const data = await response.json();
  return data;
};
</example> 