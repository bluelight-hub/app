---
description: 
globs: *.mdc
alwaysApply: false
---
# Cursor Rules Format

## Context
- Gilt für alle Fälle, in denen neue Rules angelegt oder bestehende Rules aktualisiert werden.
- Nutze es auch, wenn der User neue "Lessons" mitgibt, die als neue Rule festgehalten werden sollen.

## Requirements

1. **Dateiname & Ort**
   - Ablegen unter `.cursor/rules/`
   - Endung `.mdc`
   - Nutze das Schema `PREFIX-name.mdc` (z. B. `000-rule-creation-standards.mdc`)

2. **Frontmatter**
   - WICHTIG: Es darf nur EINE der folgenden Optionen verwendet werden:
     - Option 1: `description` (ohne globs, ohne alwaysApply: true)
     - Option 2: `globs` (ohne description, ohne alwaysApply: true)
     - Option 3: `alwaysApply: true` (ohne description, ohne globs)
   
   - `description` (Wenn die Regel inhaltlich für bestimmte Situationen gilt): 
     - Im Format `ACTION TRIGGER OUTCOME`
     - ACTION: Verben wie ENFORCE, REQUIRE, REJECT, SUGGEST
     - TRIGGER: Beschreibung des Anwendungsfalls
     - OUTCOME: (optional) erwartetes Ergebnis nach "to" oder "for"
     - IMMER in Englisch verfassen
     - Beispiel: "ENFORCE standardized testing practices for all components to ensure quality"
   
   - `globs` (Wenn die Regel für bestimmte Dateitypen gilt): 
     - MUSS als YAML-Array mit `-` formatiert sein
     - KEINE Anführungszeichen um Glob-Muster
     - Korrekte Einrückung beachten
     - Beispiel:
       ```yaml
       globs:
       - src/**/*.ts
       - test/**/*.test.ts
       ```
   
   - `alwaysApply: true` (Wenn die Regel immer gelten soll):
     - Keine weiteren Felder nötig
     - Wird für grundlegende Regeln verwendet, die immer beachtet werden müssen

3. **Body-Struktur**
   - **# Haupttitel** (z. B. Name der Rule)
   - **## Context** (Wann/warum gilt die Rule?)
   - **## Requirements** (Anforderungen, Richtlinien, Checkliste)
   - **## Examples** (mindestens ein gültiges und evtl. ein ungültiges Beispiel)

4. **Weitere Format-Hinweise**
   - Möglichst kurze und präzise Formulierungen
   - Nicht mehr XML-Tags als nötig nutzen
   - Für längere Erklärungen: Markdown-Absätze
   - Wenn sinnvoll, kurze Code-Beispiele als ``` code blocks ``` einbinden
   - Bei umfangreichen Darstellungen ggf. Mermaid-Diagramme nutzen

5. **Token-Effizienz**
   - Vermeide überflüssige Erklärungen
   - Behalte nur, was für den AI-Agenten relevant ist
   - Nutze das "ACTION TRIGGER OUTCOME"-Prinzip in `description` und in den Requirements

## Examples

<example>
description: ENFORCE consistent code style to ensure maintainability

# Example Rule mit nur description

## Context
- Used whenever a new rule is needed

## Requirements
- Title must reflect the rule's scope
- Use the short frontmatter format
</example>

<example>
globs:
- src/**/*.ts
- src/**/*.tsx

# Example Rule mit nur globs

## Context
- Gilt für TypeScript und TSX Dateien
- Hat keine description, da globs verwendet werden
</example>

<example>
alwaysApply: true

# Example Rule mit nur alwaysApply: true

## Context
- Diese Regel gilt immer, unabhängig von Datei oder Kontext
- Wird für grundlegende Regeln verwendet

## Requirements
- Keine description oder globs nötig
</example>

<example type="invalid">
description: This is a very long explanation that is not needed
globs: "**/*.mdc"
alwaysApply: true

# Ungültiges Beispiel
- Sowohl description als auch globs als auch alwaysApply gesetzt (nicht erlaubt)
- Glob-Muster in Anführungszeichen (falsch)
- Zu ausführliche Beschreibung
</example>
