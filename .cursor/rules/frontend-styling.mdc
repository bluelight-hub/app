---
description: Standards for styling React components using Ant Design and Tailwind CSS
globs: packages/frontend/src/.*\\.(tsx?|css)$
---
# Frontend Styling Conventions

This rule defines the styling approach using Ant Design and Tailwind CSS.

<rule>
name: frontend_styling
description: Standards for styling React components using Ant Design and Tailwind CSS
filters:
  - type: file_path
    pattern: "packages/frontend/src/.*\\.(tsx?|css)$"
  - type: event
    pattern: "file_create"

actions:
  - type: suggest
    message: |
      When styling components:

      1. Component Styling Priority:
         1. Use Ant Design components as primary UI components
         2. Use Tailwind for custom styling and layout
         3. Use CSS modules only when necessary for complex animations or states

      2. Ant Design Usage:
         ```tsx
         import { Button, Form, Input } from 'antd';
         
         // Prefer Ant Design components over custom ones
         const LoginForm = () => (
           <Form layout="vertical">
             <Form.Item label="Username">
               <Input />
             </Form.Item>
           </Form>
         );
         ```

      3. Tailwind Conventions:
         - Use Tailwind for layout and spacing
         - Use Tailwind for responsive design
         - Combine with Ant Design using className prop
         ```tsx
         <div className="flex flex-col gap-4 p-6">
           <Button className="w-full md:w-auto" type="primary">
             Submit
           </Button>
         </div>
         ```

      4. Theme Configuration:
         - Configure Ant Design theme tokens in theme.ts
         - Use CSS variables for shared values

      5. Responsive Design:
         - Use Tailwind breakpoints consistently
         - Implement mobile-first approach
         - Use Ant Design's responsive props where available

      6. Custom Styling:
         - Create reusable Tailwind components using @apply
         - Keep custom CSS to a minimum
         - Document any custom styling solutions

examples:
  - input: |
      // Bad: Mixing different styling approaches
      const Card = () => (
        <div style={{ padding: '20px' }}>
          <h1 className="text-2xl">Title</h1>
        </div>
      );

      // Good: Consistent use of Tailwind with Ant Design
      const Card = () => (
        <Card className="p-5">
          <Typography.Title className="text-2xl">Title</Typography.Title>
        </Card>
      );
    output: "Properly styled component using Ant Design and Tailwind"

metadata:
  priority: high
  version: 1.0
  tags:
    - frontend
    - styling
    - ant-design
    - tailwind
</rule> 