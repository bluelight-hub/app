/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  MfaMethodsResponseDto,
  RemoveWebAuthnCredentialDto,
  TotpSetupResponseDto,
  VerifyTotpDto,
  WebAuthnAuthenticationCompleteDto,
  WebAuthnAuthenticationStartDto,
  WebAuthnRegistrationCompleteDto,
  WebAuthnRegistrationStartDto,
} from '../models/index';
import {
  MfaMethodsResponseDtoFromJSON,
  MfaMethodsResponseDtoToJSON,
  RemoveWebAuthnCredentialDtoFromJSON,
  RemoveWebAuthnCredentialDtoToJSON,
  TotpSetupResponseDtoFromJSON,
  TotpSetupResponseDtoToJSON,
  VerifyTotpDtoFromJSON,
  VerifyTotpDtoToJSON,
  WebAuthnAuthenticationCompleteDtoFromJSON,
  WebAuthnAuthenticationCompleteDtoToJSON,
  WebAuthnAuthenticationStartDtoFromJSON,
  WebAuthnAuthenticationStartDtoToJSON,
  WebAuthnRegistrationCompleteDtoFromJSON,
  WebAuthnRegistrationCompleteDtoToJSON,
  WebAuthnRegistrationStartDtoFromJSON,
  WebAuthnRegistrationStartDtoToJSON,
} from '../models/index';

export interface MfaControllerCompleteWebAuthnAuthenticationV1Request {
  webAuthnAuthenticationCompleteDto: WebAuthnAuthenticationCompleteDto;
}

export interface MfaControllerCompleteWebAuthnRegistrationV1Request {
  webAuthnRegistrationCompleteDto: WebAuthnRegistrationCompleteDto;
}

export interface MfaControllerRemoveWebAuthnCredentialV1Request {
  removeWebAuthnCredentialDto: RemoveWebAuthnCredentialDto;
}

export interface MfaControllerVerifyTotpV1Request {
  verifyTotpDto: VerifyTotpDto;
}

/**
 *
 */
export class MFAApi extends runtime.BaseAPI {
  /**
   * Complete WebAuthn authentication
   */
  async mfaControllerCompleteWebAuthnAuthenticationV1Raw(
    requestParameters: MfaControllerCompleteWebAuthnAuthenticationV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['webAuthnAuthenticationCompleteDto'] == null) {
      throw new runtime.RequiredError(
        'webAuthnAuthenticationCompleteDto',
        'Required parameter "webAuthnAuthenticationCompleteDto" was null or undefined when calling mfaControllerCompleteWebAuthnAuthenticationV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/auth/mfa/webauthn/authenticate/complete`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: WebAuthnAuthenticationCompleteDtoToJSON(
          requestParameters['webAuthnAuthenticationCompleteDto'],
        ),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Complete WebAuthn authentication
   */
  async mfaControllerCompleteWebAuthnAuthenticationV1(
    requestParameters: MfaControllerCompleteWebAuthnAuthenticationV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.mfaControllerCompleteWebAuthnAuthenticationV1Raw(requestParameters, initOverrides);
  }

  /**
   * Complete WebAuthn registration
   */
  async mfaControllerCompleteWebAuthnRegistrationV1Raw(
    requestParameters: MfaControllerCompleteWebAuthnRegistrationV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['webAuthnRegistrationCompleteDto'] == null) {
      throw new runtime.RequiredError(
        'webAuthnRegistrationCompleteDto',
        'Required parameter "webAuthnRegistrationCompleteDto" was null or undefined when calling mfaControllerCompleteWebAuthnRegistrationV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/auth/mfa/webauthn/register/complete`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: WebAuthnRegistrationCompleteDtoToJSON(
          requestParameters['webAuthnRegistrationCompleteDto'],
        ),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Complete WebAuthn registration
   */
  async mfaControllerCompleteWebAuthnRegistrationV1(
    requestParameters: MfaControllerCompleteWebAuthnRegistrationV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.mfaControllerCompleteWebAuthnRegistrationV1Raw(requestParameters, initOverrides);
  }

  /**
   * Disable TOTP authentication
   */
  async mfaControllerDisableTotpV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/auth/mfa/totp`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Disable TOTP authentication
   */
  async mfaControllerDisableTotpV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.mfaControllerDisableTotpV1Raw(initOverrides);
  }

  /**
   * Get user MFA methods
   */
  async mfaControllerGetMfaMethodsV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<MfaMethodsResponseDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/auth/mfa/methods`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MfaMethodsResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * Get user MFA methods
   */
  async mfaControllerGetMfaMethodsV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<MfaMethodsResponseDto> {
    const response = await this.mfaControllerGetMfaMethodsV1Raw(initOverrides);
    return await response.value();
  }

  /**
   * Remove a WebAuthn credential
   */
  async mfaControllerRemoveWebAuthnCredentialV1Raw(
    requestParameters: MfaControllerRemoveWebAuthnCredentialV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['removeWebAuthnCredentialDto'] == null) {
      throw new runtime.RequiredError(
        'removeWebAuthnCredentialDto',
        'Required parameter "removeWebAuthnCredentialDto" was null or undefined when calling mfaControllerRemoveWebAuthnCredentialV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/auth/mfa/webauthn/credential`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: RemoveWebAuthnCredentialDtoToJSON(requestParameters['removeWebAuthnCredentialDto']),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Remove a WebAuthn credential
   */
  async mfaControllerRemoveWebAuthnCredentialV1(
    requestParameters: MfaControllerRemoveWebAuthnCredentialV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.mfaControllerRemoveWebAuthnCredentialV1Raw(requestParameters, initOverrides);
  }

  /**
   * Setup TOTP authentication
   */
  async mfaControllerSetupTotpV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<TotpSetupResponseDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/auth/mfa/totp/setup`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TotpSetupResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * Setup TOTP authentication
   */
  async mfaControllerSetupTotpV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<TotpSetupResponseDto> {
    const response = await this.mfaControllerSetupTotpV1Raw(initOverrides);
    return await response.value();
  }

  /**
   * Start WebAuthn authentication
   */
  async mfaControllerStartWebAuthnAuthenticationV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WebAuthnAuthenticationStartDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/auth/mfa/webauthn/authenticate/start`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WebAuthnAuthenticationStartDtoFromJSON(jsonValue),
    );
  }

  /**
   * Start WebAuthn authentication
   */
  async mfaControllerStartWebAuthnAuthenticationV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WebAuthnAuthenticationStartDto> {
    const response = await this.mfaControllerStartWebAuthnAuthenticationV1Raw(initOverrides);
    return await response.value();
  }

  /**
   * Start WebAuthn registration
   */
  async mfaControllerStartWebAuthnRegistrationV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WebAuthnRegistrationStartDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/auth/mfa/webauthn/register/start`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WebAuthnRegistrationStartDtoFromJSON(jsonValue),
    );
  }

  /**
   * Start WebAuthn registration
   */
  async mfaControllerStartWebAuthnRegistrationV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WebAuthnRegistrationStartDto> {
    const response = await this.mfaControllerStartWebAuthnRegistrationV1Raw(initOverrides);
    return await response.value();
  }

  /**
   * Verify TOTP code and enable MFA
   */
  async mfaControllerVerifyTotpV1Raw(
    requestParameters: MfaControllerVerifyTotpV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['verifyTotpDto'] == null) {
      throw new runtime.RequiredError(
        'verifyTotpDto',
        'Required parameter "verifyTotpDto" was null or undefined when calling mfaControllerVerifyTotpV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/auth/mfa/totp/verify`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: VerifyTotpDtoToJSON(requestParameters['verifyTotpDto']),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Verify TOTP code and enable MFA
   */
  async mfaControllerVerifyTotpV1(
    requestParameters: MfaControllerVerifyTotpV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.mfaControllerVerifyTotpV1Raw(requestParameters, initOverrides);
  }
}
