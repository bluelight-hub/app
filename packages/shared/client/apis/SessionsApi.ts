/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreateSessionActivityDto,
  SessionActivityDto,
  SessionControllerRevokeUserSessionsV1200Response,
  SessionDto,
  SessionStatisticsDto,
} from '../models/index';
import {
  CreateSessionActivityDtoFromJSON,
  CreateSessionActivityDtoToJSON,
  SessionActivityDtoFromJSON,
  SessionActivityDtoToJSON,
  SessionControllerRevokeUserSessionsV1200ResponseFromJSON,
  SessionControllerRevokeUserSessionsV1200ResponseToJSON,
  SessionDtoFromJSON,
  SessionDtoToJSON,
  SessionStatisticsDtoFromJSON,
  SessionStatisticsDtoToJSON,
} from '../models/index';

export interface SessionControllerGetSessionDetailsV1Request {
  id: string;
}

export interface SessionControllerGetSessionsV1Request {
  userId?: string;
  isOnline?: boolean;
  isRevoked?: boolean;
  minRiskScore?: number;
  maxRiskScore?: number;
  startDate?: Date;
  endDate?: Date;
  deviceType?: SessionControllerGetSessionsV1DeviceTypeEnum;
  location?: string;
  suspiciousFlags?: Array<string>;
}

export interface SessionControllerGetStatisticsV1Request {
  userId: string;
}

export interface SessionControllerRevokeMySessionV1Request {
  id: string;
}

export interface SessionControllerRevokeSessionV1Request {
  id: string;
}

export interface SessionControllerRevokeUserSessionsV1Request {
  userId: string;
}

export interface SessionControllerTrackActivityV1Request {
  id: string;
  createSessionActivityDto: CreateSessionActivityDto;
}

export interface SessionControllerUpdateHeartbeatV1Request {
  id: string;
}

/**
 *
 */
export class SessionsApi extends runtime.BaseAPI {
  /**
   * Get current user sessions
   */
  async sessionControllerGetMySessionsV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<SessionDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/admin/security/sessions/my-sessions`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionDtoFromJSON));
  }

  /**
   * Get current user sessions
   */
  async sessionControllerGetMySessionsV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<SessionDto>> {
    const response = await this.sessionControllerGetMySessionsV1Raw(initOverrides);
    return await response.value();
  }

  /**
   * Get session details
   */
  async sessionControllerGetSessionDetailsV1Raw(
    requestParameters: SessionControllerGetSessionDetailsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SessionDto>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling sessionControllerGetSessionDetailsV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/admin/security/sessions/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => SessionDtoFromJSON(jsonValue));
  }

  /**
   * Get session details
   */
  async sessionControllerGetSessionDetailsV1(
    requestParameters: SessionControllerGetSessionDetailsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SessionDto> {
    const response = await this.sessionControllerGetSessionDetailsV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get all sessions with optional filters
   */
  async sessionControllerGetSessionsV1Raw(
    requestParameters: SessionControllerGetSessionsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<SessionDto>>> {
    const queryParameters: any = {};

    if (requestParameters['userId'] != null) {
      queryParameters['userId'] = requestParameters['userId'];
    }

    if (requestParameters['isOnline'] != null) {
      queryParameters['isOnline'] = requestParameters['isOnline'];
    }

    if (requestParameters['isRevoked'] != null) {
      queryParameters['isRevoked'] = requestParameters['isRevoked'];
    }

    if (requestParameters['minRiskScore'] != null) {
      queryParameters['minRiskScore'] = requestParameters['minRiskScore'];
    }

    if (requestParameters['maxRiskScore'] != null) {
      queryParameters['maxRiskScore'] = requestParameters['maxRiskScore'];
    }

    if (requestParameters['startDate'] != null) {
      queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
    }

    if (requestParameters['endDate'] != null) {
      queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
    }

    if (requestParameters['deviceType'] != null) {
      queryParameters['deviceType'] = requestParameters['deviceType'];
    }

    if (requestParameters['location'] != null) {
      queryParameters['location'] = requestParameters['location'];
    }

    if (requestParameters['suspiciousFlags'] != null) {
      queryParameters['suspiciousFlags'] = requestParameters['suspiciousFlags'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/admin/security/sessions`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionDtoFromJSON));
  }

  /**
   * Get all sessions with optional filters
   */
  async sessionControllerGetSessionsV1(
    requestParameters: SessionControllerGetSessionsV1Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<SessionDto>> {
    const response = await this.sessionControllerGetSessionsV1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get session statistics
   */
  async sessionControllerGetStatisticsV1Raw(
    requestParameters: SessionControllerGetStatisticsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SessionStatisticsDto>> {
    if (requestParameters['userId'] == null) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter "userId" was null or undefined when calling sessionControllerGetStatisticsV1().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters['userId'] != null) {
      queryParameters['userId'] = requestParameters['userId'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/admin/security/sessions/statistics`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SessionStatisticsDtoFromJSON(jsonValue),
    );
  }

  /**
   * Get session statistics
   */
  async sessionControllerGetStatisticsV1(
    requestParameters: SessionControllerGetStatisticsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SessionStatisticsDto> {
    const response = await this.sessionControllerGetStatisticsV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Revoke own session
   */
  async sessionControllerRevokeMySessionV1Raw(
    requestParameters: SessionControllerRevokeMySessionV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling sessionControllerRevokeMySessionV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/admin/security/sessions/my-sessions/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Revoke own session
   */
  async sessionControllerRevokeMySessionV1(
    requestParameters: SessionControllerRevokeMySessionV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.sessionControllerRevokeMySessionV1Raw(requestParameters, initOverrides);
  }

  /**
   * Revoke a session
   */
  async sessionControllerRevokeSessionV1Raw(
    requestParameters: SessionControllerRevokeSessionV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling sessionControllerRevokeSessionV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/admin/security/sessions/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Revoke a session
   */
  async sessionControllerRevokeSessionV1(
    requestParameters: SessionControllerRevokeSessionV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.sessionControllerRevokeSessionV1Raw(requestParameters, initOverrides);
  }

  /**
   * Revoke all user sessions
   */
  async sessionControllerRevokeUserSessionsV1Raw(
    requestParameters: SessionControllerRevokeUserSessionsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SessionControllerRevokeUserSessionsV1200Response>> {
    if (requestParameters['userId'] == null) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter "userId" was null or undefined when calling sessionControllerRevokeUserSessionsV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/admin/security/sessions/user/{userId}`.replace(
          `{${'userId'}}`,
          encodeURIComponent(String(requestParameters['userId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SessionControllerRevokeUserSessionsV1200ResponseFromJSON(jsonValue),
    );
  }

  /**
   * Revoke all user sessions
   */
  async sessionControllerRevokeUserSessionsV1(
    requestParameters: SessionControllerRevokeUserSessionsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SessionControllerRevokeUserSessionsV1200Response> {
    const response = await this.sessionControllerRevokeUserSessionsV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Track session activity
   */
  async sessionControllerTrackActivityV1Raw(
    requestParameters: SessionControllerTrackActivityV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SessionActivityDto>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling sessionControllerTrackActivityV1().',
      );
    }

    if (requestParameters['createSessionActivityDto'] == null) {
      throw new runtime.RequiredError(
        'createSessionActivityDto',
        'Required parameter "createSessionActivityDto" was null or undefined when calling sessionControllerTrackActivityV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/admin/security/sessions/{id}/activity`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateSessionActivityDtoToJSON(requestParameters['createSessionActivityDto']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SessionActivityDtoFromJSON(jsonValue),
    );
  }

  /**
   * Track session activity
   */
  async sessionControllerTrackActivityV1(
    requestParameters: SessionControllerTrackActivityV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SessionActivityDto> {
    const response = await this.sessionControllerTrackActivityV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update session heartbeat
   */
  async sessionControllerUpdateHeartbeatV1Raw(
    requestParameters: SessionControllerUpdateHeartbeatV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling sessionControllerUpdateHeartbeatV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/admin/security/sessions/{id}/heartbeat`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update session heartbeat
   */
  async sessionControllerUpdateHeartbeatV1(
    requestParameters: SessionControllerUpdateHeartbeatV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.sessionControllerUpdateHeartbeatV1Raw(requestParameters, initOverrides);
  }
}

/**
 * @export
 */
export const SessionControllerGetSessionsV1DeviceTypeEnum = {
  Mobile: 'mobile',
  Desktop: 'desktop',
  Tablet: 'tablet',
  Unknown: 'unknown',
} as const;
export type SessionControllerGetSessionsV1DeviceTypeEnum =
  (typeof SessionControllerGetSessionsV1DeviceTypeEnum)[keyof typeof SessionControllerGetSessionsV1DeviceTypeEnum];
