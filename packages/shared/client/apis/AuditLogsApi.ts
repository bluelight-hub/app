/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { AuditLogEntity, CreateAuditLogDto } from '../models/index';
import {
  AuditLogEntityFromJSON,
  AuditLogEntityToJSON,
  CreateAuditLogDtoFromJSON,
  CreateAuditLogDtoToJSON,
} from '../models/index';

export interface AuditLogControllerArchiveOldLogsV1Request {
  daysToKeep?: number;
}

export interface AuditLogControllerBulkDeleteV1Request {
  olderThan: Date;
  severity?: AuditLogControllerBulkDeleteV1SeverityEnum;
  excludeCompliance?: boolean;
}

export interface AuditLogControllerCreateBatchV1Request {
  requestBody: Array<string>;
}

export interface AuditLogControllerCreateV1Request {
  createAuditLogDto: CreateAuditLogDto;
}

export interface AuditLogControllerExportV1Request {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: AuditLogControllerExportV1SortOrderEnum;
  actionType?: AuditLogControllerExportV1ActionTypeEnum;
  severity?: AuditLogControllerExportV1SeverityEnum;
  action?: string;
  resource?: string;
  resourceId?: string;
  userId?: string;
  userEmail?: string;
  userRole?: AuditLogControllerExportV1UserRoleEnum;
  ipAddress?: string;
  success?: boolean;
  requiresReview?: boolean;
  sensitiveData?: boolean;
  startDate?: string;
  endDate?: string;
  search?: string;
  httpMethods?: Array<string>;
  compliance?: Array<string>;
  minDuration?: number;
  maxDuration?: number;
  sessionId?: string;
  requestId?: string;
  excludeArchived?: boolean;
  format?: AuditLogControllerExportV1FormatEnum;
}

export interface AuditLogControllerFindAllV1Request {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: AuditLogControllerFindAllV1SortOrderEnum;
  actionType?: AuditLogControllerFindAllV1ActionTypeEnum;
  severity?: AuditLogControllerFindAllV1SeverityEnum;
  action?: string;
  resource?: string;
  resourceId?: string;
  userId?: string;
  userEmail?: string;
  userRole?: AuditLogControllerFindAllV1UserRoleEnum;
  ipAddress?: string;
  success?: boolean;
  requiresReview?: boolean;
  sensitiveData?: boolean;
  startDate?: string;
  endDate?: string;
  search?: string;
  httpMethods?: Array<string>;
  compliance?: Array<string>;
  minDuration?: number;
  maxDuration?: number;
  sessionId?: string;
  requestId?: string;
  excludeArchived?: boolean;
  page2?: number;
  limit2?: number;
  sortBy2?: string;
  sortOrder2?: string;
  actionType2?: string;
  severity2?: string;
  action2?: string;
  resource2?: string;
  resourceId2?: string;
  userId2?: string;
  userEmail2?: string;
  userRole2?: string;
  ipAddress2?: string;
  success2?: boolean;
  requiresReview2?: boolean;
  sensitiveData2?: boolean;
  startDate2?: string;
  endDate2?: string;
  search2?: string;
  httpMethods2?: Array<string>;
  compliance2?: Array<string>;
  minDuration2?: number;
  maxDuration2?: number;
  sessionId2?: string;
  requestId2?: string;
  excludeArchived2?: boolean;
}

export interface AuditLogControllerFindOneV1Request {
  id: string;
}

export interface AuditLogControllerGetStatisticsV1Request {
  startDate?: Date;
  endDate?: Date;
  groupBy?: AuditLogControllerGetStatisticsV1GroupByEnum;
}

export interface AuditLogControllerRemoveV1Request {
  id: string;
}

/**
 *
 */
export class AuditLogsApi extends runtime.BaseAPI {
  /**
   * Apply retention policy and cleanup logs
   */
  async auditLogControllerApplyRetentionPolicyV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/audit/logs/cleanup`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Apply retention policy and cleanup logs
   */
  async auditLogControllerApplyRetentionPolicyV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.auditLogControllerApplyRetentionPolicyV1Raw(initOverrides);
  }

  /**
   * Archive old audit logs
   */
  async auditLogControllerArchiveOldLogsV1Raw(
    requestParameters: AuditLogControllerArchiveOldLogsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters['daysToKeep'] != null) {
      queryParameters['daysToKeep'] = requestParameters['daysToKeep'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/audit/logs/archive`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Archive old audit logs
   */
  async auditLogControllerArchiveOldLogsV1(
    requestParameters: AuditLogControllerArchiveOldLogsV1Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.auditLogControllerArchiveOldLogsV1Raw(requestParameters, initOverrides);
  }

  /**
   * Bulk delete audit logs
   */
  async auditLogControllerBulkDeleteV1Raw(
    requestParameters: AuditLogControllerBulkDeleteV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['olderThan'] == null) {
      throw new runtime.RequiredError(
        'olderThan',
        'Required parameter "olderThan" was null or undefined when calling auditLogControllerBulkDeleteV1().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters['olderThan'] != null) {
      queryParameters['olderThan'] = (requestParameters['olderThan'] as any).toISOString();
    }

    if (requestParameters['severity'] != null) {
      queryParameters['severity'] = requestParameters['severity'];
    }

    if (requestParameters['excludeCompliance'] != null) {
      queryParameters['excludeCompliance'] = requestParameters['excludeCompliance'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/audit/logs`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Bulk delete audit logs
   */
  async auditLogControllerBulkDeleteV1(
    requestParameters: AuditLogControllerBulkDeleteV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.auditLogControllerBulkDeleteV1Raw(requestParameters, initOverrides);
  }

  /**
   * Create audit logs in batch
   */
  async auditLogControllerCreateBatchV1Raw(
    requestParameters: AuditLogControllerCreateBatchV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['requestBody'] == null) {
      throw new runtime.RequiredError(
        'requestBody',
        'Required parameter "requestBody" was null or undefined when calling auditLogControllerCreateBatchV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/audit/logs/batch`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters['requestBody'],
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create audit logs in batch
   */
  async auditLogControllerCreateBatchV1(
    requestParameters: AuditLogControllerCreateBatchV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.auditLogControllerCreateBatchV1Raw(requestParameters, initOverrides);
  }

  /**
   * Create audit log entry
   */
  async auditLogControllerCreateV1Raw(
    requestParameters: AuditLogControllerCreateV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuditLogEntity>> {
    if (requestParameters['createAuditLogDto'] == null) {
      throw new runtime.RequiredError(
        'createAuditLogDto',
        'Required parameter "createAuditLogDto" was null or undefined when calling auditLogControllerCreateV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/audit/logs`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateAuditLogDtoToJSON(requestParameters['createAuditLogDto']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogEntityFromJSON(jsonValue));
  }

  /**
   * Create audit log entry
   */
  async auditLogControllerCreateV1(
    requestParameters: AuditLogControllerCreateV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuditLogEntity> {
    const response = await this.auditLogControllerCreateV1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Export audit logs
   */
  async auditLogControllerExportV1Raw(
    requestParameters: AuditLogControllerExportV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page'];
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit'];
    }

    if (requestParameters['sortBy'] != null) {
      queryParameters['sortBy'] = requestParameters['sortBy'];
    }

    if (requestParameters['sortOrder'] != null) {
      queryParameters['sortOrder'] = requestParameters['sortOrder'];
    }

    if (requestParameters['actionType'] != null) {
      queryParameters['actionType'] = requestParameters['actionType'];
    }

    if (requestParameters['severity'] != null) {
      queryParameters['severity'] = requestParameters['severity'];
    }

    if (requestParameters['action'] != null) {
      queryParameters['action'] = requestParameters['action'];
    }

    if (requestParameters['resource'] != null) {
      queryParameters['resource'] = requestParameters['resource'];
    }

    if (requestParameters['resourceId'] != null) {
      queryParameters['resourceId'] = requestParameters['resourceId'];
    }

    if (requestParameters['userId'] != null) {
      queryParameters['userId'] = requestParameters['userId'];
    }

    if (requestParameters['userEmail'] != null) {
      queryParameters['userEmail'] = requestParameters['userEmail'];
    }

    if (requestParameters['userRole'] != null) {
      queryParameters['userRole'] = requestParameters['userRole'];
    }

    if (requestParameters['ipAddress'] != null) {
      queryParameters['ipAddress'] = requestParameters['ipAddress'];
    }

    if (requestParameters['success'] != null) {
      queryParameters['success'] = requestParameters['success'];
    }

    if (requestParameters['requiresReview'] != null) {
      queryParameters['requiresReview'] = requestParameters['requiresReview'];
    }

    if (requestParameters['sensitiveData'] != null) {
      queryParameters['sensitiveData'] = requestParameters['sensitiveData'];
    }

    if (requestParameters['startDate'] != null) {
      queryParameters['startDate'] = requestParameters['startDate'];
    }

    if (requestParameters['endDate'] != null) {
      queryParameters['endDate'] = requestParameters['endDate'];
    }

    if (requestParameters['search'] != null) {
      queryParameters['search'] = requestParameters['search'];
    }

    if (requestParameters['httpMethods'] != null) {
      queryParameters['httpMethods'] = requestParameters['httpMethods'];
    }

    if (requestParameters['compliance'] != null) {
      queryParameters['compliance'] = requestParameters['compliance'];
    }

    if (requestParameters['minDuration'] != null) {
      queryParameters['minDuration'] = requestParameters['minDuration'];
    }

    if (requestParameters['maxDuration'] != null) {
      queryParameters['maxDuration'] = requestParameters['maxDuration'];
    }

    if (requestParameters['sessionId'] != null) {
      queryParameters['sessionId'] = requestParameters['sessionId'];
    }

    if (requestParameters['requestId'] != null) {
      queryParameters['requestId'] = requestParameters['requestId'];
    }

    if (requestParameters['excludeArchived'] != null) {
      queryParameters['excludeArchived'] = requestParameters['excludeArchived'];
    }

    if (requestParameters['format'] != null) {
      queryParameters['format'] = requestParameters['format'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/audit/logs/export`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Export audit logs
   */
  async auditLogControllerExportV1(
    requestParameters: AuditLogControllerExportV1Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.auditLogControllerExportV1Raw(requestParameters, initOverrides);
  }

  /**
   * Query audit logs
   */
  async auditLogControllerFindAllV1Raw(
    requestParameters: AuditLogControllerFindAllV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page'];
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit'];
    }

    if (requestParameters['sortBy'] != null) {
      queryParameters['sortBy'] = requestParameters['sortBy'];
    }

    if (requestParameters['sortOrder'] != null) {
      queryParameters['sortOrder'] = requestParameters['sortOrder'];
    }

    if (requestParameters['actionType'] != null) {
      queryParameters['actionType'] = requestParameters['actionType'];
    }

    if (requestParameters['severity'] != null) {
      queryParameters['severity'] = requestParameters['severity'];
    }

    if (requestParameters['action'] != null) {
      queryParameters['action'] = requestParameters['action'];
    }

    if (requestParameters['resource'] != null) {
      queryParameters['resource'] = requestParameters['resource'];
    }

    if (requestParameters['resourceId'] != null) {
      queryParameters['resourceId'] = requestParameters['resourceId'];
    }

    if (requestParameters['userId'] != null) {
      queryParameters['userId'] = requestParameters['userId'];
    }

    if (requestParameters['userEmail'] != null) {
      queryParameters['userEmail'] = requestParameters['userEmail'];
    }

    if (requestParameters['userRole'] != null) {
      queryParameters['userRole'] = requestParameters['userRole'];
    }

    if (requestParameters['ipAddress'] != null) {
      queryParameters['ipAddress'] = requestParameters['ipAddress'];
    }

    if (requestParameters['success'] != null) {
      queryParameters['success'] = requestParameters['success'];
    }

    if (requestParameters['requiresReview'] != null) {
      queryParameters['requiresReview'] = requestParameters['requiresReview'];
    }

    if (requestParameters['sensitiveData'] != null) {
      queryParameters['sensitiveData'] = requestParameters['sensitiveData'];
    }

    if (requestParameters['startDate'] != null) {
      queryParameters['startDate'] = requestParameters['startDate'];
    }

    if (requestParameters['endDate'] != null) {
      queryParameters['endDate'] = requestParameters['endDate'];
    }

    if (requestParameters['search'] != null) {
      queryParameters['search'] = requestParameters['search'];
    }

    if (requestParameters['httpMethods'] != null) {
      queryParameters['httpMethods'] = requestParameters['httpMethods'];
    }

    if (requestParameters['compliance'] != null) {
      queryParameters['compliance'] = requestParameters['compliance'];
    }

    if (requestParameters['minDuration'] != null) {
      queryParameters['minDuration'] = requestParameters['minDuration'];
    }

    if (requestParameters['maxDuration'] != null) {
      queryParameters['maxDuration'] = requestParameters['maxDuration'];
    }

    if (requestParameters['sessionId'] != null) {
      queryParameters['sessionId'] = requestParameters['sessionId'];
    }

    if (requestParameters['requestId'] != null) {
      queryParameters['requestId'] = requestParameters['requestId'];
    }

    if (requestParameters['excludeArchived'] != null) {
      queryParameters['excludeArchived'] = requestParameters['excludeArchived'];
    }

    if (requestParameters['page2'] != null) {
      queryParameters['page'] = requestParameters['page2'];
    }

    if (requestParameters['limit2'] != null) {
      queryParameters['limit'] = requestParameters['limit2'];
    }

    if (requestParameters['sortBy2'] != null) {
      queryParameters['sortBy'] = requestParameters['sortBy2'];
    }

    if (requestParameters['sortOrder2'] != null) {
      queryParameters['sortOrder'] = requestParameters['sortOrder2'];
    }

    if (requestParameters['actionType2'] != null) {
      queryParameters['actionType'] = requestParameters['actionType2'];
    }

    if (requestParameters['severity2'] != null) {
      queryParameters['severity'] = requestParameters['severity2'];
    }

    if (requestParameters['action2'] != null) {
      queryParameters['action'] = requestParameters['action2'];
    }

    if (requestParameters['resource2'] != null) {
      queryParameters['resource'] = requestParameters['resource2'];
    }

    if (requestParameters['resourceId2'] != null) {
      queryParameters['resourceId'] = requestParameters['resourceId2'];
    }

    if (requestParameters['userId2'] != null) {
      queryParameters['userId'] = requestParameters['userId2'];
    }

    if (requestParameters['userEmail2'] != null) {
      queryParameters['userEmail'] = requestParameters['userEmail2'];
    }

    if (requestParameters['userRole2'] != null) {
      queryParameters['userRole'] = requestParameters['userRole2'];
    }

    if (requestParameters['ipAddress2'] != null) {
      queryParameters['ipAddress'] = requestParameters['ipAddress2'];
    }

    if (requestParameters['success2'] != null) {
      queryParameters['success'] = requestParameters['success2'];
    }

    if (requestParameters['requiresReview2'] != null) {
      queryParameters['requiresReview'] = requestParameters['requiresReview2'];
    }

    if (requestParameters['sensitiveData2'] != null) {
      queryParameters['sensitiveData'] = requestParameters['sensitiveData2'];
    }

    if (requestParameters['startDate2'] != null) {
      queryParameters['startDate'] = requestParameters['startDate2'];
    }

    if (requestParameters['endDate2'] != null) {
      queryParameters['endDate'] = requestParameters['endDate2'];
    }

    if (requestParameters['search2'] != null) {
      queryParameters['search'] = requestParameters['search2'];
    }

    if (requestParameters['httpMethods2'] != null) {
      queryParameters['httpMethods'] = requestParameters['httpMethods2'];
    }

    if (requestParameters['compliance2'] != null) {
      queryParameters['compliance'] = requestParameters['compliance2'];
    }

    if (requestParameters['minDuration2'] != null) {
      queryParameters['minDuration'] = requestParameters['minDuration2'];
    }

    if (requestParameters['maxDuration2'] != null) {
      queryParameters['maxDuration'] = requestParameters['maxDuration2'];
    }

    if (requestParameters['sessionId2'] != null) {
      queryParameters['sessionId'] = requestParameters['sessionId2'];
    }

    if (requestParameters['requestId2'] != null) {
      queryParameters['requestId'] = requestParameters['requestId2'];
    }

    if (requestParameters['excludeArchived2'] != null) {
      queryParameters['excludeArchived'] = requestParameters['excludeArchived2'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/audit/logs`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Query audit logs
   */
  async auditLogControllerFindAllV1(
    requestParameters: AuditLogControllerFindAllV1Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.auditLogControllerFindAllV1Raw(requestParameters, initOverrides);
  }

  /**
   * Get audit log by ID
   */
  async auditLogControllerFindOneV1Raw(
    requestParameters: AuditLogControllerFindOneV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuditLogEntity>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling auditLogControllerFindOneV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/audit/logs/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogEntityFromJSON(jsonValue));
  }

  /**
   * Get audit log by ID
   */
  async auditLogControllerFindOneV1(
    requestParameters: AuditLogControllerFindOneV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuditLogEntity> {
    const response = await this.auditLogControllerFindOneV1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get audit log statistics
   */
  async auditLogControllerGetStatisticsV1Raw(
    requestParameters: AuditLogControllerGetStatisticsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters['startDate'] != null) {
      queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
    }

    if (requestParameters['endDate'] != null) {
      queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
    }

    if (requestParameters['groupBy'] != null) {
      queryParameters['groupBy'] = requestParameters['groupBy'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/audit/logs/statistics`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get audit log statistics
   */
  async auditLogControllerGetStatisticsV1(
    requestParameters: AuditLogControllerGetStatisticsV1Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.auditLogControllerGetStatisticsV1Raw(requestParameters, initOverrides);
  }

  /**
   * Delete audit log
   */
  async auditLogControllerRemoveV1Raw(
    requestParameters: AuditLogControllerRemoveV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling auditLogControllerRemoveV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/audit/logs/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete audit log
   */
  async auditLogControllerRemoveV1(
    requestParameters: AuditLogControllerRemoveV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.auditLogControllerRemoveV1Raw(requestParameters, initOverrides);
  }
}

/**
 * @export
 */
export const AuditLogControllerBulkDeleteV1SeverityEnum = {
  Low: 'LOW',
  Medium: 'MEDIUM',
  High: 'HIGH',
  Critical: 'CRITICAL',
} as const;
export type AuditLogControllerBulkDeleteV1SeverityEnum =
  (typeof AuditLogControllerBulkDeleteV1SeverityEnum)[keyof typeof AuditLogControllerBulkDeleteV1SeverityEnum];
/**
 * @export
 */
export const AuditLogControllerExportV1SortOrderEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;
export type AuditLogControllerExportV1SortOrderEnum =
  (typeof AuditLogControllerExportV1SortOrderEnum)[keyof typeof AuditLogControllerExportV1SortOrderEnum];
/**
 * @export
 */
export const AuditLogControllerExportV1ActionTypeEnum = {
  Create: 'CREATE',
  Read: 'READ',
  Update: 'UPDATE',
  Delete: 'DELETE',
  Login: 'LOGIN',
  Logout: 'LOGOUT',
  PermissionChange: 'PERMISSION_CHANGE',
  RoleChange: 'ROLE_CHANGE',
  BulkOperation: 'BULK_OPERATION',
  SystemConfig: 'SYSTEM_CONFIG',
  Export: 'EXPORT',
  Import: 'IMPORT',
} as const;
export type AuditLogControllerExportV1ActionTypeEnum =
  (typeof AuditLogControllerExportV1ActionTypeEnum)[keyof typeof AuditLogControllerExportV1ActionTypeEnum];
/**
 * @export
 */
export const AuditLogControllerExportV1SeverityEnum = {
  Low: 'LOW',
  Medium: 'MEDIUM',
  High: 'HIGH',
  Critical: 'CRITICAL',
} as const;
export type AuditLogControllerExportV1SeverityEnum =
  (typeof AuditLogControllerExportV1SeverityEnum)[keyof typeof AuditLogControllerExportV1SeverityEnum];
/**
 * @export
 */
export const AuditLogControllerExportV1UserRoleEnum = {
  SuperAdmin: 'SUPER_ADMIN',
  Admin: 'ADMIN',
  Manager: 'MANAGER',
  Support: 'SUPPORT',
  User: 'USER',
} as const;
export type AuditLogControllerExportV1UserRoleEnum =
  (typeof AuditLogControllerExportV1UserRoleEnum)[keyof typeof AuditLogControllerExportV1UserRoleEnum];
/**
 * @export
 */
export const AuditLogControllerExportV1FormatEnum = {
  Json: 'json',
  Csv: 'csv',
  Ndjson: 'ndjson',
} as const;
export type AuditLogControllerExportV1FormatEnum =
  (typeof AuditLogControllerExportV1FormatEnum)[keyof typeof AuditLogControllerExportV1FormatEnum];
/**
 * @export
 */
export const AuditLogControllerFindAllV1SortOrderEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;
export type AuditLogControllerFindAllV1SortOrderEnum =
  (typeof AuditLogControllerFindAllV1SortOrderEnum)[keyof typeof AuditLogControllerFindAllV1SortOrderEnum];
/**
 * @export
 */
export const AuditLogControllerFindAllV1ActionTypeEnum = {
  Create: 'CREATE',
  Read: 'READ',
  Update: 'UPDATE',
  Delete: 'DELETE',
  Login: 'LOGIN',
  Logout: 'LOGOUT',
  PermissionChange: 'PERMISSION_CHANGE',
  RoleChange: 'ROLE_CHANGE',
  BulkOperation: 'BULK_OPERATION',
  SystemConfig: 'SYSTEM_CONFIG',
  Export: 'EXPORT',
  Import: 'IMPORT',
} as const;
export type AuditLogControllerFindAllV1ActionTypeEnum =
  (typeof AuditLogControllerFindAllV1ActionTypeEnum)[keyof typeof AuditLogControllerFindAllV1ActionTypeEnum];
/**
 * @export
 */
export const AuditLogControllerFindAllV1SeverityEnum = {
  Low: 'LOW',
  Medium: 'MEDIUM',
  High: 'HIGH',
  Critical: 'CRITICAL',
} as const;
export type AuditLogControllerFindAllV1SeverityEnum =
  (typeof AuditLogControllerFindAllV1SeverityEnum)[keyof typeof AuditLogControllerFindAllV1SeverityEnum];
/**
 * @export
 */
export const AuditLogControllerFindAllV1UserRoleEnum = {
  SuperAdmin: 'SUPER_ADMIN',
  Admin: 'ADMIN',
  Manager: 'MANAGER',
  Support: 'SUPPORT',
  User: 'USER',
} as const;
export type AuditLogControllerFindAllV1UserRoleEnum =
  (typeof AuditLogControllerFindAllV1UserRoleEnum)[keyof typeof AuditLogControllerFindAllV1UserRoleEnum];
/**
 * @export
 */
export const AuditLogControllerGetStatisticsV1GroupByEnum = {
  Action: 'action',
  Resource: 'resource',
  Severity: 'severity',
  User: 'user',
  Day: 'day',
  Hour: 'hour',
} as const;
export type AuditLogControllerGetStatisticsV1GroupByEnum =
  (typeof AuditLogControllerGetStatisticsV1GroupByEnum)[keyof typeof AuditLogControllerGetStatisticsV1GroupByEnum];
