/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.16
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { CreateEinsatzDto, Einsatz } from "../models/index";
import {
  CreateEinsatzDtoFromJSON,
  CreateEinsatzDtoToJSON,
  EinsatzFromJSON,
  EinsatzToJSON,
} from "../models/index";

export interface EinsatzControllerCreateV1Request {
  createEinsatzDto: CreateEinsatzDto;
}

export interface EinsatzControllerFindByIdV1Request {
  id: string;
}

/**
 *
 */
export class EinsatzApi extends runtime.BaseAPI {
  /**
   * Einen neuen Einsatz erstellen
   */
  async einsatzControllerCreateV1Raw(
    requestParameters: EinsatzControllerCreateV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Einsatz>> {
    if (requestParameters["createEinsatzDto"] == null) {
      throw new runtime.RequiredError(
        "createEinsatzDto",
        'Required parameter "createEinsatzDto" was null or undefined when calling einsatzControllerCreateV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v1/einsatz`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateEinsatzDtoToJSON(requestParameters["createEinsatzDto"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EinsatzFromJSON(jsonValue),
    );
  }

  /**
   * Einen neuen Einsatz erstellen
   */
  async einsatzControllerCreateV1(
    requestParameters: EinsatzControllerCreateV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Einsatz> {
    const response = await this.einsatzControllerCreateV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Alle Einsätze abrufen
   */
  async einsatzControllerFindAllV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Einsatz>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/einsatz`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(EinsatzFromJSON),
    );
  }

  /**
   * Alle Einsätze abrufen
   */
  async einsatzControllerFindAllV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Einsatz>> {
    const response = await this.einsatzControllerFindAllV1Raw(initOverrides);
    return await response.value();
  }

  /**
   * Einen Einsatz anhand der ID abrufen
   */
  async einsatzControllerFindByIdV1Raw(
    requestParameters: EinsatzControllerFindByIdV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Einsatz>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling einsatzControllerFindByIdV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/einsatz/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EinsatzFromJSON(jsonValue),
    );
  }

  /**
   * Einen Einsatz anhand der ID abrufen
   */
  async einsatzControllerFindByIdV1(
    requestParameters: EinsatzControllerFindByIdV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Einsatz> {
    const response = await this.einsatzControllerFindByIdV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
