/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { SecurityLogControllerGetSecurityLogsV1200Response } from '../models/index';
import {
  SecurityLogControllerGetSecurityLogsV1200ResponseFromJSON,
  SecurityLogControllerGetSecurityLogsV1200ResponseToJSON,
} from '../models/index';

export interface SecurityLogControllerGetSecurityLogsV1Request {
  eventType?: string;
  userId?: string;
  from?: string;
  to?: string;
  page?: number;
  pageSize?: number;
}

/**
 *
 */
export class SecurityLogsApi extends runtime.BaseAPI {
  /**
   * Retrieve security logs with optional filters and pagination
   * Get security logs
   */
  async securityLogControllerGetSecurityLogsV1Raw(
    requestParameters: SecurityLogControllerGetSecurityLogsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SecurityLogControllerGetSecurityLogsV1200Response>> {
    const queryParameters: any = {};

    if (requestParameters['eventType'] != null) {
      queryParameters['eventType'] = requestParameters['eventType'];
    }

    if (requestParameters['userId'] != null) {
      queryParameters['userId'] = requestParameters['userId'];
    }

    if (requestParameters['from'] != null) {
      queryParameters['from'] = requestParameters['from'];
    }

    if (requestParameters['to'] != null) {
      queryParameters['to'] = requestParameters['to'];
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page'];
    }

    if (requestParameters['pageSize'] != null) {
      queryParameters['pageSize'] = requestParameters['pageSize'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/admin/security-logs`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SecurityLogControllerGetSecurityLogsV1200ResponseFromJSON(jsonValue),
    );
  }

  /**
   * Retrieve security logs with optional filters and pagination
   * Get security logs
   */
  async securityLogControllerGetSecurityLogsV1(
    requestParameters: SecurityLogControllerGetSecurityLogsV1Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SecurityLogControllerGetSecurityLogsV1200Response> {
    const response = await this.securityLogControllerGetSecurityLogsV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
