/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.16
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CreateEtbDto,
  EtbAttachmentResponse,
  EtbAttachmentsResponse,
  EtbEntriesResponse,
  EtbEntryResponse,
  UeberschreibeEtbDto,
  UpdateEtbDto,
} from "../models/index";
import {
  CreateEtbDtoFromJSON,
  CreateEtbDtoToJSON,
  EtbAttachmentResponseFromJSON,
  EtbAttachmentResponseToJSON,
  EtbAttachmentsResponseFromJSON,
  EtbAttachmentsResponseToJSON,
  EtbEntriesResponseFromJSON,
  EtbEntriesResponseToJSON,
  EtbEntryResponseFromJSON,
  EtbEntryResponseToJSON,
  UeberschreibeEtbDtoFromJSON,
  UeberschreibeEtbDtoToJSON,
  UpdateEtbDtoFromJSON,
  UpdateEtbDtoToJSON,
} from "../models/index";

export interface EtbControllerAddAttachmentV1Request {
  id: string;
  file: Blob;
  beschreibung?: string;
}

export interface EtbControllerCloseEntryV1Request {
  id: string;
}

export interface EtbControllerCreateV1Request {
  createEtbDto: CreateEtbDto;
}

export interface EtbControllerFindAllV1Request {
  page?: number;
  limit?: number;
  referenzEinsatzId?: string;
  referenzPatientId?: string;
  referenzEinsatzmittelId?: string;
  kategorie?: string;
  vonZeitstempel?: string;
  bisZeitstempel?: string;
  autorId?: string;
  status?: EtbControllerFindAllV1StatusEnum;
  includeUeberschrieben?: boolean;
}

export interface EtbControllerFindAttachmentV1Request {
  id: string;
}

export interface EtbControllerFindAttachmentsV1Request {
  id: string;
}

export interface EtbControllerFindOneV1Request {
  id: string;
}

export interface EtbControllerUeberschreibeEintragV1Request {
  id: string;
  ueberschreibeEtbDto: UeberschreibeEtbDto;
}

export interface EtbControllerUpdateV1Request {
  id: string;
  updateEtbDto: UpdateEtbDto;
}

/**
 *
 */
export class EinsatztagebuchApi extends runtime.BaseAPI {
  /**
   * Fügt eine Anlage zu einem ETB-Eintrag hinzu
   */
  async etbControllerAddAttachmentV1Raw(
    requestParameters: EtbControllerAddAttachmentV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EtbAttachmentResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling etbControllerAddAttachmentV1().',
      );
    }

    if (requestParameters["file"] == null) {
      throw new runtime.RequiredError(
        "file",
        'Required parameter "file" was null or undefined when calling etbControllerAddAttachmentV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [
      { contentType: "multipart/form-data" },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters["beschreibung"] != null) {
      formParams.append(
        "beschreibung",
        requestParameters["beschreibung"] as any,
      );
    }

    if (requestParameters["file"] != null) {
      formParams.append("file", requestParameters["file"] as any);
    }

    const response = await this.request(
      {
        path: `/v1/etb/{id}/anlage`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EtbAttachmentResponseFromJSON(jsonValue),
    );
  }

  /**
   * Fügt eine Anlage zu einem ETB-Eintrag hinzu
   */
  async etbControllerAddAttachmentV1(
    requestParameters: EtbControllerAddAttachmentV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EtbAttachmentResponse> {
    const response = await this.etbControllerAddAttachmentV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Schließt einen ETB-Eintrag ab
   */
  async etbControllerCloseEntryV1Raw(
    requestParameters: EtbControllerCloseEntryV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EtbEntryResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling etbControllerCloseEntryV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/etb/{id}/schliessen`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EtbEntryResponseFromJSON(jsonValue),
    );
  }

  /**
   * Schließt einen ETB-Eintrag ab
   */
  async etbControllerCloseEntryV1(
    requestParameters: EtbControllerCloseEntryV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EtbEntryResponse> {
    const response = await this.etbControllerCloseEntryV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Erstellt einen neuen ETB-Eintrag
   */
  async etbControllerCreateV1Raw(
    requestParameters: EtbControllerCreateV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EtbEntryResponse>> {
    if (requestParameters["createEtbDto"] == null) {
      throw new runtime.RequiredError(
        "createEtbDto",
        'Required parameter "createEtbDto" was null or undefined when calling etbControllerCreateV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v1/etb`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateEtbDtoToJSON(requestParameters["createEtbDto"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EtbEntryResponseFromJSON(jsonValue),
    );
  }

  /**
   * Erstellt einen neuen ETB-Eintrag
   */
  async etbControllerCreateV1(
    requestParameters: EtbControllerCreateV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EtbEntryResponse> {
    const response = await this.etbControllerCreateV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Findet alle ETB-Einträge mit optionaler Filterung
   */
  async etbControllerFindAllV1Raw(
    requestParameters: EtbControllerFindAllV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EtbEntriesResponse>> {
    const queryParameters: any = {};

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["referenzEinsatzId"] != null) {
      queryParameters["referenzEinsatzId"] =
        requestParameters["referenzEinsatzId"];
    }

    if (requestParameters["referenzPatientId"] != null) {
      queryParameters["referenzPatientId"] =
        requestParameters["referenzPatientId"];
    }

    if (requestParameters["referenzEinsatzmittelId"] != null) {
      queryParameters["referenzEinsatzmittelId"] =
        requestParameters["referenzEinsatzmittelId"];
    }

    if (requestParameters["kategorie"] != null) {
      queryParameters["kategorie"] = requestParameters["kategorie"];
    }

    if (requestParameters["vonZeitstempel"] != null) {
      queryParameters["vonZeitstempel"] = requestParameters["vonZeitstempel"];
    }

    if (requestParameters["bisZeitstempel"] != null) {
      queryParameters["bisZeitstempel"] = requestParameters["bisZeitstempel"];
    }

    if (requestParameters["autorId"] != null) {
      queryParameters["autorId"] = requestParameters["autorId"];
    }

    if (requestParameters["status"] != null) {
      queryParameters["status"] = requestParameters["status"];
    }

    if (requestParameters["includeUeberschrieben"] != null) {
      queryParameters["includeUeberschrieben"] =
        requestParameters["includeUeberschrieben"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/etb`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EtbEntriesResponseFromJSON(jsonValue),
    );
  }

  /**
   * Findet alle ETB-Einträge mit optionaler Filterung
   */
  async etbControllerFindAllV1(
    requestParameters: EtbControllerFindAllV1Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EtbEntriesResponse> {
    const response = await this.etbControllerFindAllV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Findet eine Anlage anhand ihrer ID
   */
  async etbControllerFindAttachmentV1Raw(
    requestParameters: EtbControllerFindAttachmentV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EtbAttachmentResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling etbControllerFindAttachmentV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/etb/anlage/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EtbAttachmentResponseFromJSON(jsonValue),
    );
  }

  /**
   * Findet eine Anlage anhand ihrer ID
   */
  async etbControllerFindAttachmentV1(
    requestParameters: EtbControllerFindAttachmentV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EtbAttachmentResponse> {
    const response = await this.etbControllerFindAttachmentV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Findet alle Anlagen zu einem ETB-Eintrag
   */
  async etbControllerFindAttachmentsV1Raw(
    requestParameters: EtbControllerFindAttachmentsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EtbAttachmentsResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling etbControllerFindAttachmentsV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/etb/{id}/anlagen`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EtbAttachmentsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Findet alle Anlagen zu einem ETB-Eintrag
   */
  async etbControllerFindAttachmentsV1(
    requestParameters: EtbControllerFindAttachmentsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EtbAttachmentsResponse> {
    const response = await this.etbControllerFindAttachmentsV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Findet einen ETB-Eintrag anhand seiner ID
   */
  async etbControllerFindOneV1Raw(
    requestParameters: EtbControllerFindOneV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EtbEntryResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling etbControllerFindOneV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/etb/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EtbEntryResponseFromJSON(jsonValue),
    );
  }

  /**
   * Findet einen ETB-Eintrag anhand seiner ID
   */
  async etbControllerFindOneV1(
    requestParameters: EtbControllerFindOneV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EtbEntryResponse> {
    const response = await this.etbControllerFindOneV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Überschreibt einen ETB-Eintrag
   */
  async etbControllerUeberschreibeEintragV1Raw(
    requestParameters: EtbControllerUeberschreibeEintragV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EtbEntryResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling etbControllerUeberschreibeEintragV1().',
      );
    }

    if (requestParameters["ueberschreibeEtbDto"] == null) {
      throw new runtime.RequiredError(
        "ueberschreibeEtbDto",
        'Required parameter "ueberschreibeEtbDto" was null or undefined when calling etbControllerUeberschreibeEintragV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v1/etb/{id}/ueberschreiben`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UeberschreibeEtbDtoToJSON(
          requestParameters["ueberschreibeEtbDto"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EtbEntryResponseFromJSON(jsonValue),
    );
  }

  /**
   * Überschreibt einen ETB-Eintrag
   */
  async etbControllerUeberschreibeEintragV1(
    requestParameters: EtbControllerUeberschreibeEintragV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EtbEntryResponse> {
    const response = await this.etbControllerUeberschreibeEintragV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Aktualisiert einen ETB-Eintrag
   */
  async etbControllerUpdateV1Raw(
    requestParameters: EtbControllerUpdateV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EtbEntryResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling etbControllerUpdateV1().',
      );
    }

    if (requestParameters["updateEtbDto"] == null) {
      throw new runtime.RequiredError(
        "updateEtbDto",
        'Required parameter "updateEtbDto" was null or undefined when calling etbControllerUpdateV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v1/etb/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateEtbDtoToJSON(requestParameters["updateEtbDto"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EtbEntryResponseFromJSON(jsonValue),
    );
  }

  /**
   * Aktualisiert einen ETB-Eintrag
   */
  async etbControllerUpdateV1(
    requestParameters: EtbControllerUpdateV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EtbEntryResponse> {
    const response = await this.etbControllerUpdateV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}

/**
 * @export
 */
export const EtbControllerFindAllV1StatusEnum = {
  Aktiv: "aktiv",
  Ueberschrieben: "ueberschrieben",
} as const;
export type EtbControllerFindAllV1StatusEnum =
  (typeof EtbControllerFindAllV1StatusEnum)[keyof typeof EtbControllerFindAllV1StatusEnum];
