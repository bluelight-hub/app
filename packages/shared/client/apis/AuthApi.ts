/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  AdminSetupDto,
  AuthResponseDto,
  LoginUserDto,
  RegisterUserDto,
  UserResponseDto,
} from '../models/index';
import {
  AdminSetupDtoFromJSON,
  AdminSetupDtoToJSON,
  AuthResponseDtoFromJSON,
  AuthResponseDtoToJSON,
  LoginUserDtoFromJSON,
  LoginUserDtoToJSON,
  RegisterUserDtoFromJSON,
  RegisterUserDtoToJSON,
  UserResponseDtoFromJSON,
  UserResponseDtoToJSON,
} from '../models/index';

export interface AuthControllerAdminSetupRequest {
  adminSetupDto: AdminSetupDto;
}

export interface AuthControllerLoginRequest {
  loginUserDto: LoginUserDto;
}

export interface AuthControllerRegisterRequest {
  registerUserDto: RegisterUserDto;
}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI {
  /**
   * Richtet das Passwort für einen Admin-Account ein. Erfordert Authentifizierung.
   * Admin-Passwort einrichten
   */
  async authControllerAdminSetupRaw(
    requestParameters: AuthControllerAdminSetupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['adminSetupDto'] == null) {
      throw new runtime.RequiredError(
        'adminSetupDto',
        'Required parameter "adminSetupDto" was null or undefined when calling authControllerAdminSetup().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/auth/admin/setup`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AdminSetupDtoToJSON(requestParameters['adminSetupDto']),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Richtet das Passwort für einen Admin-Account ein. Erfordert Authentifizierung.
   * Admin-Passwort einrichten
   */
  async authControllerAdminSetup(
    requestParameters: AuthControllerAdminSetupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.authControllerAdminSetupRaw(requestParameters, initOverrides);
  }

  /**
   * Gibt die Informationen des aktuell authentifizierten Benutzers zurück
   * Aktuelle Benutzerinformationen abrufen
   */
  async authControllerGetCurrentUserRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserResponseDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/auth/me`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
  }

  /**
   * Gibt die Informationen des aktuell authentifizierten Benutzers zurück
   * Aktuelle Benutzerinformationen abrufen
   */
  async authControllerGetCurrentUser(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserResponseDto> {
    const response = await this.authControllerGetCurrentUserRaw(initOverrides);
    return await response.value();
  }

  /**
   * Meldet einen Benutzer nur mit Benutzernamen an (ohne Passwort)
   * Benutzer anmelden
   */
  async authControllerLoginRaw(
    requestParameters: AuthControllerLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuthResponseDto>> {
    if (requestParameters['loginUserDto'] == null) {
      throw new runtime.RequiredError(
        'loginUserDto',
        'Required parameter "loginUserDto" was null or undefined when calling authControllerLogin().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/auth/login`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: LoginUserDtoToJSON(requestParameters['loginUserDto']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseDtoFromJSON(jsonValue));
  }

  /**
   * Meldet einen Benutzer nur mit Benutzernamen an (ohne Passwort)
   * Benutzer anmelden
   */
  async authControllerLogin(
    requestParameters: AuthControllerLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuthResponseDto> {
    const response = await this.authControllerLoginRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Meldet den Benutzer ab und löscht alle Authentifizierungs-Cookies
   * Benutzer abmelden
   */
  async authControllerLogoutRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/auth/logout`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Meldet den Benutzer ab und löscht alle Authentifizierungs-Cookies
   * Benutzer abmelden
   */
  async authControllerLogout(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.authControllerLogoutRaw(initOverrides);
  }

  /**
   * Erneuert das Access-Token mit einem gültigen Refresh-Token aus dem Cookie
   * Access-Token erneuern
   */
  async authControllerRefreshRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/auth/refresh`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Erneuert das Access-Token mit einem gültigen Refresh-Token aus dem Cookie
   * Access-Token erneuern
   */
  async authControllerRefresh(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.authControllerRefreshRaw(initOverrides);
  }

  /**
   * Registriert einen neuen Benutzer ohne Passwort. Der erste Benutzer wird automatisch SUPER_ADMIN.
   * Neuen Benutzer registrieren
   */
  async authControllerRegisterRaw(
    requestParameters: AuthControllerRegisterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuthResponseDto>> {
    if (requestParameters['registerUserDto'] == null) {
      throw new runtime.RequiredError(
        'registerUserDto',
        'Required parameter "registerUserDto" was null or undefined when calling authControllerRegister().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/auth/register`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RegisterUserDtoToJSON(requestParameters['registerUserDto']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseDtoFromJSON(jsonValue));
  }

  /**
   * Registriert einen neuen Benutzer ohne Passwort. Der erste Benutzer wird automatisch SUPER_ADMIN.
   * Neuen Benutzer registrieren
   */
  async authControllerRegister(
    requestParameters: AuthControllerRegisterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuthResponseDto> {
    const response = await this.authControllerRegisterRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
