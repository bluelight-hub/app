/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  AuthUserDto,
  LoginDto,
  LoginResponseDto,
  MfaLoginDto,
  RefreshTokenDto,
  TokenResponseDto,
} from '../models/index';
import {
  AuthUserDtoFromJSON,
  AuthUserDtoToJSON,
  LoginDtoFromJSON,
  LoginDtoToJSON,
  LoginResponseDtoFromJSON,
  LoginResponseDtoToJSON,
  MfaLoginDtoFromJSON,
  MfaLoginDtoToJSON,
  RefreshTokenDtoFromJSON,
  RefreshTokenDtoToJSON,
  TokenResponseDtoFromJSON,
  TokenResponseDtoToJSON,
} from '../models/index';

export interface AuthControllerLoginV1Request {
  loginDto: LoginDto;
}

export interface AuthControllerLoginWithMfaV1Request {
  mfaLoginDto: MfaLoginDto;
}

export interface AuthControllerRefreshV1Request {
  refreshTokenDto: RefreshTokenDto;
}

/**
 *
 */
export class AuthenticationApi extends runtime.BaseAPI {
  /**
   * Get current user
   */
  async authControllerGetCurrentUserV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuthUserDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/auth/me`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthUserDtoFromJSON(jsonValue));
  }

  /**
   * Get current user
   */
  async authControllerGetCurrentUserV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuthUserDto> {
    const response = await this.authControllerGetCurrentUserV1Raw(initOverrides);
    return await response.value();
  }

  /**
   * Admin login
   */
  async authControllerLoginV1Raw(
    requestParameters: AuthControllerLoginV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<LoginResponseDto>> {
    if (requestParameters['loginDto'] == null) {
      throw new runtime.RequiredError(
        'loginDto',
        'Required parameter "loginDto" was null or undefined when calling authControllerLoginV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v1/api/auth/login`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: LoginDtoToJSON(requestParameters['loginDto']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      LoginResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * Admin login
   */
  async authControllerLoginV1(
    requestParameters: AuthControllerLoginV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<LoginResponseDto> {
    const response = await this.authControllerLoginV1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Complete login with MFA verification
   */
  async authControllerLoginWithMfaV1Raw(
    requestParameters: AuthControllerLoginWithMfaV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<LoginResponseDto>> {
    if (requestParameters['mfaLoginDto'] == null) {
      throw new runtime.RequiredError(
        'mfaLoginDto',
        'Required parameter "mfaLoginDto" was null or undefined when calling authControllerLoginWithMfaV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v1/api/auth/login/mfa`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: MfaLoginDtoToJSON(requestParameters['mfaLoginDto']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      LoginResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * Complete login with MFA verification
   */
  async authControllerLoginWithMfaV1(
    requestParameters: AuthControllerLoginWithMfaV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<LoginResponseDto> {
    const response = await this.authControllerLoginWithMfaV1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Logout current session
   */
  async authControllerLogoutV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/auth/logout`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Logout current session
   */
  async authControllerLogoutV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.authControllerLogoutV1Raw(initOverrides);
  }

  /**
   * Refresh access token
   */
  async authControllerRefreshV1Raw(
    requestParameters: AuthControllerRefreshV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<TokenResponseDto>> {
    if (requestParameters['refreshTokenDto'] == null) {
      throw new runtime.RequiredError(
        'refreshTokenDto',
        'Required parameter "refreshTokenDto" was null or undefined when calling authControllerRefreshV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v1/api/auth/refresh`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RefreshTokenDtoToJSON(requestParameters['refreshTokenDto']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TokenResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * Refresh access token
   */
  async authControllerRefreshV1(
    requestParameters: AuthControllerRefreshV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<TokenResponseDto> {
    const response = await this.authControllerRefreshV1Raw(requestParameters, initOverrides);
    return await response.value();
  }
}
