/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreateThreatRuleDto,
  RuleEvaluationResultDto,
  RuleStatisticsDto,
  TestRuleDto,
  ThreatRuleDto,
  UpdateThreatRuleDto,
} from '../models/index';
import {
  CreateThreatRuleDtoFromJSON,
  CreateThreatRuleDtoToJSON,
  RuleEvaluationResultDtoFromJSON,
  RuleEvaluationResultDtoToJSON,
  RuleStatisticsDtoFromJSON,
  RuleStatisticsDtoToJSON,
  TestRuleDtoFromJSON,
  TestRuleDtoToJSON,
  ThreatRuleDtoFromJSON,
  ThreatRuleDtoToJSON,
  UpdateThreatRuleDtoFromJSON,
  UpdateThreatRuleDtoToJSON,
} from '../models/index';

export interface ThreatRuleControllerCreateRuleV1Request {
  createThreatRuleDto: CreateThreatRuleDto;
}

export interface ThreatRuleControllerDeleteRuleV1Request {
  id: string;
}

export interface ThreatRuleControllerGetRuleStatisticsV1Request {
  id: string;
}

export interface ThreatRuleControllerGetRuleV1Request {
  id: string;
}

export interface ThreatRuleControllerGetRulesV1Request {
  status?: ThreatRuleControllerGetRulesV1StatusEnum;
  severity?: ThreatRuleControllerGetRulesV1SeverityEnum;
  tags?: Array<string>;
}

export interface ThreatRuleControllerTestRuleV1Request {
  testRuleDto: TestRuleDto;
}

export interface ThreatRuleControllerUpdateRuleV1Request {
  id: string;
  updateThreatRuleDto: UpdateThreatRuleDto;
}

/**
 *
 */
export class ThreatDetectionApi extends runtime.BaseAPI {
  /**
   * Create a new threat detection rule
   */
  async threatRuleControllerCreateRuleV1Raw(
    requestParameters: ThreatRuleControllerCreateRuleV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['createThreatRuleDto'] == null) {
      throw new runtime.RequiredError(
        'createThreatRuleDto',
        'Required parameter "createThreatRuleDto" was null or undefined when calling threatRuleControllerCreateRuleV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/threat-rules`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateThreatRuleDtoToJSON(requestParameters['createThreatRuleDto']),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create a new threat detection rule
   */
  async threatRuleControllerCreateRuleV1(
    requestParameters: ThreatRuleControllerCreateRuleV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.threatRuleControllerCreateRuleV1Raw(requestParameters, initOverrides);
  }

  /**
   * Delete a threat detection rule
   */
  async threatRuleControllerDeleteRuleV1Raw(
    requestParameters: ThreatRuleControllerDeleteRuleV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling threatRuleControllerDeleteRuleV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/threat-rules/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a threat detection rule
   */
  async threatRuleControllerDeleteRuleV1(
    requestParameters: ThreatRuleControllerDeleteRuleV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.threatRuleControllerDeleteRuleV1Raw(requestParameters, initOverrides);
  }

  /**
   * Get threat detection engine metrics
   */
  async threatRuleControllerGetEngineMetricsV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/threat-rules/metrics/engine`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get threat detection engine metrics
   */
  async threatRuleControllerGetEngineMetricsV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.threatRuleControllerGetEngineMetricsV1Raw(initOverrides);
  }

  /**
   * Get statistics for a specific rule
   */
  async threatRuleControllerGetRuleStatisticsV1Raw(
    requestParameters: ThreatRuleControllerGetRuleStatisticsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling threatRuleControllerGetRuleStatisticsV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/threat-rules/{id}/statistics`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get statistics for a specific rule
   */
  async threatRuleControllerGetRuleStatisticsV1(
    requestParameters: ThreatRuleControllerGetRuleStatisticsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.threatRuleControllerGetRuleStatisticsV1Raw(requestParameters, initOverrides);
  }

  /**
   * Get a specific threat detection rule
   */
  async threatRuleControllerGetRuleV1Raw(
    requestParameters: ThreatRuleControllerGetRuleV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ThreatRuleDto>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling threatRuleControllerGetRuleV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/threat-rules/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ThreatRuleDtoFromJSON(jsonValue));
  }

  /**
   * Get a specific threat detection rule
   */
  async threatRuleControllerGetRuleV1(
    requestParameters: ThreatRuleControllerGetRuleV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ThreatRuleDto> {
    const response = await this.threatRuleControllerGetRuleV1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get all threat detection rules
   */
  async threatRuleControllerGetRulesV1Raw(
    requestParameters: ThreatRuleControllerGetRulesV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<ThreatRuleDto>>> {
    const queryParameters: any = {};

    if (requestParameters['status'] != null) {
      queryParameters['status'] = requestParameters['status'];
    }

    if (requestParameters['severity'] != null) {
      queryParameters['severity'] = requestParameters['severity'];
    }

    if (requestParameters['tags'] != null) {
      queryParameters['tags'] = requestParameters['tags'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/threat-rules`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ThreatRuleDtoFromJSON),
    );
  }

  /**
   * Get all threat detection rules
   */
  async threatRuleControllerGetRulesV1(
    requestParameters: ThreatRuleControllerGetRulesV1Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<ThreatRuleDto>> {
    const response = await this.threatRuleControllerGetRulesV1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get threat detection rule statistics
   */
  async threatRuleControllerGetStatisticsV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RuleStatisticsDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/threat-rules/statistics/overview`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RuleStatisticsDtoFromJSON(jsonValue),
    );
  }

  /**
   * Get threat detection rule statistics
   */
  async threatRuleControllerGetStatisticsV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RuleStatisticsDto> {
    const response = await this.threatRuleControllerGetStatisticsV1Raw(initOverrides);
    return await response.value();
  }

  /**
   * Reload all threat detection rules
   */
  async threatRuleControllerReloadRulesV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/threat-rules/reload`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Reload all threat detection rules
   */
  async threatRuleControllerReloadRulesV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.threatRuleControllerReloadRulesV1Raw(initOverrides);
  }

  /**
   * Test a threat detection rule manually
   */
  async threatRuleControllerTestRuleV1Raw(
    requestParameters: ThreatRuleControllerTestRuleV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RuleEvaluationResultDto>> {
    if (requestParameters['testRuleDto'] == null) {
      throw new runtime.RequiredError(
        'testRuleDto',
        'Required parameter "testRuleDto" was null or undefined when calling threatRuleControllerTestRuleV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/threat-rules/test`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: TestRuleDtoToJSON(requestParameters['testRuleDto']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RuleEvaluationResultDtoFromJSON(jsonValue),
    );
  }

  /**
   * Test a threat detection rule manually
   */
  async threatRuleControllerTestRuleV1(
    requestParameters: ThreatRuleControllerTestRuleV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RuleEvaluationResultDto> {
    const response = await this.threatRuleControllerTestRuleV1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update a threat detection rule
   */
  async threatRuleControllerUpdateRuleV1Raw(
    requestParameters: ThreatRuleControllerUpdateRuleV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling threatRuleControllerUpdateRuleV1().',
      );
    }

    if (requestParameters['updateThreatRuleDto'] == null) {
      throw new runtime.RequiredError(
        'updateThreatRuleDto',
        'Required parameter "updateThreatRuleDto" was null or undefined when calling threatRuleControllerUpdateRuleV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/threat-rules/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateThreatRuleDtoToJSON(requestParameters['updateThreatRuleDto']),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update a threat detection rule
   */
  async threatRuleControllerUpdateRuleV1(
    requestParameters: ThreatRuleControllerUpdateRuleV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.threatRuleControllerUpdateRuleV1Raw(requestParameters, initOverrides);
  }
}

/**
 * @export
 */
export const ThreatRuleControllerGetRulesV1StatusEnum = {
  Active: 'ACTIVE',
  Inactive: 'INACTIVE',
  Testing: 'TESTING',
} as const;
export type ThreatRuleControllerGetRulesV1StatusEnum =
  (typeof ThreatRuleControllerGetRulesV1StatusEnum)[keyof typeof ThreatRuleControllerGetRulesV1StatusEnum];
/**
 * @export
 */
export const ThreatRuleControllerGetRulesV1SeverityEnum = {
  Low: 'LOW',
  Medium: 'MEDIUM',
  High: 'HIGH',
  Critical: 'CRITICAL',
} as const;
export type ThreatRuleControllerGetRulesV1SeverityEnum =
  (typeof ThreatRuleControllerGetRulesV1SeverityEnum)[keyof typeof ThreatRuleControllerGetRulesV1SeverityEnum];
