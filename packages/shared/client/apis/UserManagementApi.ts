/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { CreateUserDto } from '../models/index';
import { CreateUserDtoFromJSON, CreateUserDtoToJSON } from '../models/index';

export interface UserManagementControllerCreateVAlphaRequest {
  createUserDto: CreateUserDto;
}

export interface UserManagementControllerRemoveVAlphaRequest {
  id: string;
}

/**
 *
 */
export class UserManagementApi extends runtime.BaseAPI {
  /**
   * Neuen Benutzer erstellen
   */
  async userManagementControllerCreateVAlphaRaw(
    requestParameters: UserManagementControllerCreateVAlphaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['createUserDto'] == null) {
      throw new runtime.RequiredError(
        'createUserDto',
        'Required parameter "createUserDto" was null or undefined when calling userManagementControllerCreateVAlpha().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/v-alpha/admin/users`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateUserDtoToJSON(requestParameters['createUserDto']),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Neuen Benutzer erstellen
   */
  async userManagementControllerCreateVAlpha(
    requestParameters: UserManagementControllerCreateVAlphaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.userManagementControllerCreateVAlphaRaw(requestParameters, initOverrides);
  }

  /**
   * Alle Benutzer auflisten
   */
  async userManagementControllerFindAllVAlphaRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v-alpha/admin/users`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Alle Benutzer auflisten
   */
  async userManagementControllerFindAllVAlpha(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.userManagementControllerFindAllVAlphaRaw(initOverrides);
  }

  /**
   * Benutzer löschen
   */
  async userManagementControllerRemoveVAlphaRaw(
    requestParameters: UserManagementControllerRemoveVAlphaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling userManagementControllerRemoveVAlpha().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v-alpha/admin/users/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Benutzer löschen
   */
  async userManagementControllerRemoveVAlpha(
    requestParameters: UserManagementControllerRemoveVAlphaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.userManagementControllerRemoveVAlphaRaw(requestParameters, initOverrides);
  }
}
