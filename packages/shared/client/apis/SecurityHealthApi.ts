/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  SecurityHealthControllerCheckSecurityLogsHealthV1200Response,
  SecurityHealthControllerCheckSecurityLogsHealthV1503Response,
} from '../models/index';
import {
  SecurityHealthControllerCheckSecurityLogsHealthV1200ResponseFromJSON,
  SecurityHealthControllerCheckSecurityLogsHealthV1200ResponseToJSON,
  SecurityHealthControllerCheckSecurityLogsHealthV1503ResponseFromJSON,
  SecurityHealthControllerCheckSecurityLogsHealthV1503ResponseToJSON,
} from '../models/index';

/**
 *
 */
export class SecurityHealthApi extends runtime.BaseAPI {
  /**
   * Verifies the integrity of the security log hash chain
   * Chain integrity check
   */
  async securityHealthControllerCheckChainHealthV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/api/health/security-logs/chain`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Verifies the integrity of the security log hash chain
   * Chain integrity check
   */
  async securityHealthControllerCheckChainHealthV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.securityHealthControllerCheckChainHealthV1Raw(initOverrides);
  }

  /**
   * Quick health check for the security log queue
   * Queue health check
   */
  async securityHealthControllerCheckQueueHealthV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/api/health/security-logs/queue`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Quick health check for the security log queue
   * Queue health check
   */
  async securityHealthControllerCheckQueueHealthV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.securityHealthControllerCheckQueueHealthV1Raw(initOverrides);
  }

  /**
   * Performs comprehensive health checks on all security logging components
   * Security logging system health check
   */
  async securityHealthControllerCheckSecurityLogsHealthV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SecurityHealthControllerCheckSecurityLogsHealthV1200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/api/health/security-logs`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SecurityHealthControllerCheckSecurityLogsHealthV1200ResponseFromJSON(jsonValue),
    );
  }

  /**
   * Performs comprehensive health checks on all security logging components
   * Security logging system health check
   */
  async securityHealthControllerCheckSecurityLogsHealthV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SecurityHealthControllerCheckSecurityLogsHealthV1200Response> {
    const response = await this.securityHealthControllerCheckSecurityLogsHealthV1Raw(initOverrides);
    return await response.value();
  }
}
