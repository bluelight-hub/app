/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { LoginAttemptDto, LoginAttemptStatsDto } from '../models/index';
import {
  LoginAttemptDtoFromJSON,
  LoginAttemptDtoToJSON,
  LoginAttemptStatsDtoFromJSON,
  LoginAttemptStatsDtoToJSON,
} from '../models/index';

export interface LoginAttemptControllerGetLoginStatsV1Request {
  startDate: string;
  endDate: string;
  email?: string;
}

export interface LoginAttemptControllerGetRecentAttemptsV1Request {
  email?: string;
  limit?: number;
}

/**
 *
 */
export class AuthLoginAttemptsApi extends runtime.BaseAPI {
  /**
   * Get login attempt statistics
   */
  async loginAttemptControllerGetLoginStatsV1Raw(
    requestParameters: LoginAttemptControllerGetLoginStatsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<LoginAttemptStatsDto>> {
    if (requestParameters['startDate'] == null) {
      throw new runtime.RequiredError(
        'startDate',
        'Required parameter "startDate" was null or undefined when calling loginAttemptControllerGetLoginStatsV1().',
      );
    }

    if (requestParameters['endDate'] == null) {
      throw new runtime.RequiredError(
        'endDate',
        'Required parameter "endDate" was null or undefined when calling loginAttemptControllerGetLoginStatsV1().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters['startDate'] != null) {
      queryParameters['startDate'] = requestParameters['startDate'];
    }

    if (requestParameters['endDate'] != null) {
      queryParameters['endDate'] = requestParameters['endDate'];
    }

    if (requestParameters['email'] != null) {
      queryParameters['email'] = requestParameters['email'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/auth/login-attempts/stats`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      LoginAttemptStatsDtoFromJSON(jsonValue),
    );
  }

  /**
   * Get login attempt statistics
   */
  async loginAttemptControllerGetLoginStatsV1(
    requestParameters: LoginAttemptControllerGetLoginStatsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<LoginAttemptStatsDto> {
    const response = await this.loginAttemptControllerGetLoginStatsV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get recent login attempts
   */
  async loginAttemptControllerGetRecentAttemptsV1Raw(
    requestParameters: LoginAttemptControllerGetRecentAttemptsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<LoginAttemptDto>>> {
    const queryParameters: any = {};

    if (requestParameters['email'] != null) {
      queryParameters['email'] = requestParameters['email'];
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/auth/login-attempts/recent`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(LoginAttemptDtoFromJSON),
    );
  }

  /**
   * Get recent login attempts
   */
  async loginAttemptControllerGetRecentAttemptsV1(
    requestParameters: LoginAttemptControllerGetRecentAttemptsV1Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<LoginAttemptDto>> {
    const response = await this.loginAttemptControllerGetRecentAttemptsV1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
