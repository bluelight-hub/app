/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';

export interface SecurityControllerGetAccountLockoutMetricsV1Request {
  startDate?: string;
  endDate?: string;
}

export interface SecurityControllerGetFailedLoginMetricsV1Request {
  startDate?: string;
  endDate?: string;
}

export interface SecurityControllerGetSecurityLogsV1Request {
  eventType?: SecurityControllerGetSecurityLogsV1EventTypeEnum;
  userId?: string;
  ipAddress?: string;
  startDate?: string;
  endDate?: string;
  limit?: number;
}

export interface SecurityControllerGetSuspiciousActivityMetricsV1Request {
  startDate?: string;
  endDate?: string;
}

export interface SecurityControllerUnlockAccountV1Request {
  email: string;
}

/**
 *
 */
export class SecurityApi extends runtime.BaseAPI {
  /**
   * Get account lockout metrics
   */
  async securityControllerGetAccountLockoutMetricsV1Raw(
    requestParameters: SecurityControllerGetAccountLockoutMetricsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters['startDate'] != null) {
      queryParameters['startDate'] = requestParameters['startDate'];
    }

    if (requestParameters['endDate'] != null) {
      queryParameters['endDate'] = requestParameters['endDate'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/security/metrics/lockouts`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get account lockout metrics
   */
  async securityControllerGetAccountLockoutMetricsV1(
    requestParameters: SecurityControllerGetAccountLockoutMetricsV1Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.securityControllerGetAccountLockoutMetricsV1Raw(requestParameters, initOverrides);
  }

  /**
   * Get security dashboard metrics
   */
  async securityControllerGetDashboardMetricsV1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/security/metrics/dashboard`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get security dashboard metrics
   */
  async securityControllerGetDashboardMetricsV1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.securityControllerGetDashboardMetricsV1Raw(initOverrides);
  }

  /**
   * Get failed login metrics
   */
  async securityControllerGetFailedLoginMetricsV1Raw(
    requestParameters: SecurityControllerGetFailedLoginMetricsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters['startDate'] != null) {
      queryParameters['startDate'] = requestParameters['startDate'];
    }

    if (requestParameters['endDate'] != null) {
      queryParameters['endDate'] = requestParameters['endDate'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/security/metrics/failed-logins`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get failed login metrics
   */
  async securityControllerGetFailedLoginMetricsV1(
    requestParameters: SecurityControllerGetFailedLoginMetricsV1Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.securityControllerGetFailedLoginMetricsV1Raw(requestParameters, initOverrides);
  }

  /**
   * Get security logs
   */
  async securityControllerGetSecurityLogsV1Raw(
    requestParameters: SecurityControllerGetSecurityLogsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters['eventType'] != null) {
      queryParameters['eventType'] = requestParameters['eventType'];
    }

    if (requestParameters['userId'] != null) {
      queryParameters['userId'] = requestParameters['userId'];
    }

    if (requestParameters['ipAddress'] != null) {
      queryParameters['ipAddress'] = requestParameters['ipAddress'];
    }

    if (requestParameters['startDate'] != null) {
      queryParameters['startDate'] = requestParameters['startDate'];
    }

    if (requestParameters['endDate'] != null) {
      queryParameters['endDate'] = requestParameters['endDate'];
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/security/logs`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get security logs
   */
  async securityControllerGetSecurityLogsV1(
    requestParameters: SecurityControllerGetSecurityLogsV1Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.securityControllerGetSecurityLogsV1Raw(requestParameters, initOverrides);
  }

  /**
   * Get suspicious activity metrics
   */
  async securityControllerGetSuspiciousActivityMetricsV1Raw(
    requestParameters: SecurityControllerGetSuspiciousActivityMetricsV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters['startDate'] != null) {
      queryParameters['startDate'] = requestParameters['startDate'];
    }

    if (requestParameters['endDate'] != null) {
      queryParameters['endDate'] = requestParameters['endDate'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/security/metrics/suspicious-activities`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get suspicious activity metrics
   */
  async securityControllerGetSuspiciousActivityMetricsV1(
    requestParameters: SecurityControllerGetSuspiciousActivityMetricsV1Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.securityControllerGetSuspiciousActivityMetricsV1Raw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   * Unlock a locked account
   */
  async securityControllerUnlockAccountV1Raw(
    requestParameters: SecurityControllerUnlockAccountV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['email'] == null) {
      throw new runtime.RequiredError(
        'email',
        'Required parameter "email" was null or undefined when calling securityControllerUnlockAccountV1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/api/security/unlock-account/{email}`.replace(
          `{${'email'}}`,
          encodeURIComponent(String(requestParameters['email'])),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Unlock a locked account
   */
  async securityControllerUnlockAccountV1(
    requestParameters: SecurityControllerUnlockAccountV1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.securityControllerUnlockAccountV1Raw(requestParameters, initOverrides);
  }
}

/**
 * @export
 */
export const SecurityControllerGetSecurityLogsV1EventTypeEnum = {
  LoginSuccess: 'LOGIN_SUCCESS',
  LoginFailed: 'LOGIN_FAILED',
  AccountLocked: 'ACCOUNT_LOCKED',
  AccountUnlocked: 'ACCOUNT_UNLOCKED',
  TokenRefresh: 'TOKEN_REFRESH',
  TokenRefreshFailed: 'TOKEN_REFRESH_FAILED',
  Logout: 'LOGOUT',
  SessionExpired: 'SESSION_EXPIRED',
  SessionActivity: 'SESSION_ACTIVITY',
  SuspiciousActivity: 'SUSPICIOUS_ACTIVITY',
  PageView: 'PAGE_VIEW',
  ApiCall: 'API_CALL',
  SystemCheckpoint: 'SYSTEM_CHECKPOINT',
} as const;
export type SecurityControllerGetSecurityLogsV1EventTypeEnum =
  (typeof SecurityControllerGetSecurityLogsV1EventTypeEnum)[keyof typeof SecurityControllerGetSecurityLogsV1EventTypeEnum];
