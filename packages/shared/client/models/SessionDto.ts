/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface SessionDto
 */
export interface SessionDto {
  /**
   * Eindeutige Session-ID
   * @type {string}
   * @memberof SessionDto
   */
  id: string;
  /**
   * ID des zugehörigen Benutzers
   * @type {string}
   * @memberof SessionDto
   */
  userId: string;
  /**
   * Benutzername des Session-Inhabers
   * @type {string}
   * @memberof SessionDto
   */
  username: string;
  /**
   * E-Mail-Adresse des Session-Inhabers
   * @type {string}
   * @memberof SessionDto
   */
  email: string;
  /**
   * IP-Adresse des Clients
   * @type {string}
   * @memberof SessionDto
   */
  ipAddress?: string;
  /**
   * User-Agent-String des Browsers
   * @type {string}
   * @memberof SessionDto
   */
  userAgent?: string;
  /**
   * Geografischer Standort (aus IP-Adresse abgeleitet)
   * @type {string}
   * @memberof SessionDto
   */
  location?: string;
  /**
   * Erkannter Gerätetyp
   * @type {string}
   * @memberof SessionDto
   */
  deviceType?: SessionDtoDeviceTypeEnum;
  /**
   * Browser-Name
   * @type {string}
   * @memberof SessionDto
   */
  browser?: string;
  /**
   * Browser-Version
   * @type {string}
   * @memberof SessionDto
   */
  browserVersion?: string;
  /**
   * Betriebssystem
   * @type {string}
   * @memberof SessionDto
   */
  os?: string;
  /**
   * Betriebssystem-Version
   * @type {string}
   * @memberof SessionDto
   */
  osVersion?: string;
  /**
   * Verwendete Login-Methode
   * @type {string}
   * @memberof SessionDto
   */
  loginMethod?: SessionDtoLoginMethodEnum;
  /**
   * Online-Status der Session
   * @type {boolean}
   * @memberof SessionDto
   */
  isOnline: boolean;
  /**
   * Zeitpunkt des letzten Heartbeat-Signals
   * @type {Date}
   * @memberof SessionDto
   */
  lastHeartbeat?: Date;
  /**
   * Zeitpunkt der letzten Aktivität
   * @type {Date}
   * @memberof SessionDto
   */
  lastActivityAt: Date;
  /**
   * Anzahl der Aktivitäten in dieser Session
   * @type {number}
   * @memberof SessionDto
   */
  activityCount: number;
  /**
   * Risikobewertung der Session (0-100)
   * @type {number}
   * @memberof SessionDto
   */
  riskScore: number;
  /**
   * Liste verdächtiger Merkmale
   * @type {Array<string>}
   * @memberof SessionDto
   */
  suspiciousFlags: Array<string>;
  /**
   * Erstellungszeitpunkt der Session
   * @type {Date}
   * @memberof SessionDto
   */
  createdAt: Date;
  /**
   * Ablaufzeitpunkt der Session
   * @type {Date}
   * @memberof SessionDto
   */
  expiresAt: Date;
  /**
   * Gibt an, ob die Session widerrufen wurde
   * @type {boolean}
   * @memberof SessionDto
   */
  isRevoked: boolean;
  /**
   * Zeitpunkt des Widerrufs
   * @type {Date}
   * @memberof SessionDto
   */
  revokedAt?: Date;
  /**
   * Grund für den Widerruf
   * @type {string}
   * @memberof SessionDto
   */
  revokedReason?: string;
}

/**
 * @export
 */
export const SessionDtoDeviceTypeEnum = {
  Mobile: 'mobile',
  Desktop: 'desktop',
  Tablet: 'tablet',
  Unknown: 'unknown',
} as const;
export type SessionDtoDeviceTypeEnum =
  (typeof SessionDtoDeviceTypeEnum)[keyof typeof SessionDtoDeviceTypeEnum];

/**
 * @export
 */
export const SessionDtoLoginMethodEnum = {
  Password: 'password',
  Oauth: 'oauth',
  Sso: 'sso',
  Biometric: 'biometric',
} as const;
export type SessionDtoLoginMethodEnum =
  (typeof SessionDtoLoginMethodEnum)[keyof typeof SessionDtoLoginMethodEnum];

/**
 * Check if a given object implements the SessionDto interface.
 */
export function instanceOfSessionDto(value: object): value is SessionDto {
  if (!('id' in value) || value['id'] === undefined) return false;
  if (!('userId' in value) || value['userId'] === undefined) return false;
  if (!('username' in value) || value['username'] === undefined) return false;
  if (!('email' in value) || value['email'] === undefined) return false;
  if (!('isOnline' in value) || value['isOnline'] === undefined) return false;
  if (!('lastActivityAt' in value) || value['lastActivityAt'] === undefined) return false;
  if (!('activityCount' in value) || value['activityCount'] === undefined) return false;
  if (!('riskScore' in value) || value['riskScore'] === undefined) return false;
  if (!('suspiciousFlags' in value) || value['suspiciousFlags'] === undefined) return false;
  if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
  if (!('expiresAt' in value) || value['expiresAt'] === undefined) return false;
  if (!('isRevoked' in value) || value['isRevoked'] === undefined) return false;
  return true;
}

export function SessionDtoFromJSON(json: any): SessionDto {
  return SessionDtoFromJSONTyped(json, false);
}

export function SessionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionDto {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'],
    userId: json['userId'],
    username: json['username'],
    email: json['email'],
    ipAddress: json['ipAddress'] == null ? undefined : json['ipAddress'],
    userAgent: json['userAgent'] == null ? undefined : json['userAgent'],
    location: json['location'] == null ? undefined : json['location'],
    deviceType: json['deviceType'] == null ? undefined : json['deviceType'],
    browser: json['browser'] == null ? undefined : json['browser'],
    browserVersion: json['browserVersion'] == null ? undefined : json['browserVersion'],
    os: json['os'] == null ? undefined : json['os'],
    osVersion: json['osVersion'] == null ? undefined : json['osVersion'],
    loginMethod: json['loginMethod'] == null ? undefined : json['loginMethod'],
    isOnline: json['isOnline'],
    lastHeartbeat: json['lastHeartbeat'] == null ? undefined : new Date(json['lastHeartbeat']),
    lastActivityAt: new Date(json['lastActivityAt']),
    activityCount: json['activityCount'],
    riskScore: json['riskScore'],
    suspiciousFlags: json['suspiciousFlags'],
    createdAt: new Date(json['createdAt']),
    expiresAt: new Date(json['expiresAt']),
    isRevoked: json['isRevoked'],
    revokedAt: json['revokedAt'] == null ? undefined : new Date(json['revokedAt']),
    revokedReason: json['revokedReason'] == null ? undefined : json['revokedReason'],
  };
}

export function SessionDtoToJSON(json: any): SessionDto {
  return SessionDtoToJSONTyped(json, false);
}

export function SessionDtoToJSONTyped(
  value?: SessionDto | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    userId: value['userId'],
    username: value['username'],
    email: value['email'],
    ipAddress: value['ipAddress'],
    userAgent: value['userAgent'],
    location: value['location'],
    deviceType: value['deviceType'],
    browser: value['browser'],
    browserVersion: value['browserVersion'],
    os: value['os'],
    osVersion: value['osVersion'],
    loginMethod: value['loginMethod'],
    isOnline: value['isOnline'],
    lastHeartbeat:
      value['lastHeartbeat'] == null ? undefined : value['lastHeartbeat'].toISOString(),
    lastActivityAt: value['lastActivityAt'].toISOString(),
    activityCount: value['activityCount'],
    riskScore: value['riskScore'],
    suspiciousFlags: value['suspiciousFlags'],
    createdAt: value['createdAt'].toISOString(),
    expiresAt: value['expiresAt'].toISOString(),
    isRevoked: value['isRevoked'],
    revokedAt: value['revokedAt'] == null ? undefined : value['revokedAt'].toISOString(),
    revokedReason: value['revokedReason'],
  };
}
