/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface LoginAttemptDto
 */
export interface LoginAttemptDto {
  /**
   * Eindeutige ID des Login-Versuchs
   * @type {string}
   * @memberof LoginAttemptDto
   */
  id: string;
  /**
   * Benutzer-ID (falls der Benutzer existiert)
   * @type {string}
   * @memberof LoginAttemptDto
   */
  userId?: string;
  /**
   * E-Mail-Adresse, die beim Login-Versuch verwendet wurde
   * @type {string}
   * @memberof LoginAttemptDto
   */
  email: string;
  /**
   * Zeitstempel des Login-Versuchs
   * @type {Date}
   * @memberof LoginAttemptDto
   */
  attemptAt: Date;
  /**
   * IP-Adresse, von der der Versuch ausging
   * @type {string}
   * @memberof LoginAttemptDto
   */
  ipAddress: string;
  /**
   * User-Agent-String des Browsers/Clients
   * @type {string}
   * @memberof LoginAttemptDto
   */
  userAgent?: string;
  /**
   * Erfolg des Login-Versuchs
   * @type {boolean}
   * @memberof LoginAttemptDto
   */
  success: boolean;
  /**
   * Grund für gescheiterten Login-Versuch
   * @type {string}
   * @memberof LoginAttemptDto
   */
  failureReason?: string;
  /**
   * Geografischer Standort (aus IP abgeleitet)
   * @type {string}
   * @memberof LoginAttemptDto
   */
  location?: string;
  /**
   * Gerätetyp
   * @type {string}
   * @memberof LoginAttemptDto
   */
  deviceType?: string;
  /**
   * Browser-Name
   * @type {string}
   * @memberof LoginAttemptDto
   */
  browser?: string;
  /**
   * Betriebssystem
   * @type {string}
   * @memberof LoginAttemptDto
   */
  os?: string;
  /**
   * Markierung für verdächtigen Login-Versuch
   * @type {boolean}
   * @memberof LoginAttemptDto
   */
  suspicious: boolean;
  /**
   * Risiko-Score (0-100, höher = riskanter)
   * @type {number}
   * @memberof LoginAttemptDto
   */
  riskScore: number;
}

/**
 * Check if a given object implements the LoginAttemptDto interface.
 */
export function instanceOfLoginAttemptDto(value: object): value is LoginAttemptDto {
  if (!('id' in value) || value['id'] === undefined) return false;
  if (!('email' in value) || value['email'] === undefined) return false;
  if (!('attemptAt' in value) || value['attemptAt'] === undefined) return false;
  if (!('ipAddress' in value) || value['ipAddress'] === undefined) return false;
  if (!('success' in value) || value['success'] === undefined) return false;
  if (!('suspicious' in value) || value['suspicious'] === undefined) return false;
  if (!('riskScore' in value) || value['riskScore'] === undefined) return false;
  return true;
}

export function LoginAttemptDtoFromJSON(json: any): LoginAttemptDto {
  return LoginAttemptDtoFromJSONTyped(json, false);
}

export function LoginAttemptDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): LoginAttemptDto {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'],
    userId: json['userId'] == null ? undefined : json['userId'],
    email: json['email'],
    attemptAt: new Date(json['attemptAt']),
    ipAddress: json['ipAddress'],
    userAgent: json['userAgent'] == null ? undefined : json['userAgent'],
    success: json['success'],
    failureReason: json['failureReason'] == null ? undefined : json['failureReason'],
    location: json['location'] == null ? undefined : json['location'],
    deviceType: json['deviceType'] == null ? undefined : json['deviceType'],
    browser: json['browser'] == null ? undefined : json['browser'],
    os: json['os'] == null ? undefined : json['os'],
    suspicious: json['suspicious'],
    riskScore: json['riskScore'],
  };
}

export function LoginAttemptDtoToJSON(json: any): LoginAttemptDto {
  return LoginAttemptDtoToJSONTyped(json, false);
}

export function LoginAttemptDtoToJSONTyped(
  value?: LoginAttemptDto | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    userId: value['userId'],
    email: value['email'],
    attemptAt: value['attemptAt'].toISOString(),
    ipAddress: value['ipAddress'],
    userAgent: value['userAgent'],
    success: value['success'],
    failureReason: value['failureReason'],
    location: value['location'],
    deviceType: value['deviceType'],
    browser: value['browser'],
    os: value['os'],
    suspicious: value['suspicious'],
    riskScore: value['riskScore'],
  };
}
