/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface LoginAttemptStatsDto
 */
export interface LoginAttemptStatsDto {
  /**
   * Gesamtzahl aller Login-Versuche im Zeitraum
   * @type {number}
   * @memberof LoginAttemptStatsDto
   */
  totalAttempts: number;
  /**
   * Anzahl erfolgreicher Login-Versuche
   * @type {number}
   * @memberof LoginAttemptStatsDto
   */
  successfulAttempts: number;
  /**
   * Anzahl fehlgeschlagener Login-Versuche
   * @type {number}
   * @memberof LoginAttemptStatsDto
   */
  failedAttempts: number;
  /**
   * Anzahl eindeutiger IP-Adressen
   * @type {number}
   * @memberof LoginAttemptStatsDto
   */
  uniqueIps: number;
  /**
   * Anzahl verd√§chtiger Login-Versuche
   * @type {number}
   * @memberof LoginAttemptStatsDto
   */
  suspiciousAttempts: number;
  /**
   * Durchschnittlicher Risiko-Score aller Versuche
   * @type {number}
   * @memberof LoginAttemptStatsDto
   */
  averageRiskScore: number;
  /**
   * Beginn des Auswertungszeitraums
   * @type {Date}
   * @memberof LoginAttemptStatsDto
   */
  periodStart: Date;
  /**
   * Ende des Auswertungszeitraums
   * @type {Date}
   * @memberof LoginAttemptStatsDto
   */
  periodEnd: Date;
}

/**
 * Check if a given object implements the LoginAttemptStatsDto interface.
 */
export function instanceOfLoginAttemptStatsDto(value: object): value is LoginAttemptStatsDto {
  if (!('totalAttempts' in value) || value['totalAttempts'] === undefined) return false;
  if (!('successfulAttempts' in value) || value['successfulAttempts'] === undefined) return false;
  if (!('failedAttempts' in value) || value['failedAttempts'] === undefined) return false;
  if (!('uniqueIps' in value) || value['uniqueIps'] === undefined) return false;
  if (!('suspiciousAttempts' in value) || value['suspiciousAttempts'] === undefined) return false;
  if (!('averageRiskScore' in value) || value['averageRiskScore'] === undefined) return false;
  if (!('periodStart' in value) || value['periodStart'] === undefined) return false;
  if (!('periodEnd' in value) || value['periodEnd'] === undefined) return false;
  return true;
}

export function LoginAttemptStatsDtoFromJSON(json: any): LoginAttemptStatsDto {
  return LoginAttemptStatsDtoFromJSONTyped(json, false);
}

export function LoginAttemptStatsDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): LoginAttemptStatsDto {
  if (json == null) {
    return json;
  }
  return {
    totalAttempts: json['totalAttempts'],
    successfulAttempts: json['successfulAttempts'],
    failedAttempts: json['failedAttempts'],
    uniqueIps: json['uniqueIps'],
    suspiciousAttempts: json['suspiciousAttempts'],
    averageRiskScore: json['averageRiskScore'],
    periodStart: new Date(json['periodStart']),
    periodEnd: new Date(json['periodEnd']),
  };
}

export function LoginAttemptStatsDtoToJSON(json: any): LoginAttemptStatsDto {
  return LoginAttemptStatsDtoToJSONTyped(json, false);
}

export function LoginAttemptStatsDtoToJSONTyped(
  value?: LoginAttemptStatsDto | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    totalAttempts: value['totalAttempts'],
    successfulAttempts: value['successfulAttempts'],
    failedAttempts: value['failedAttempts'],
    uniqueIps: value['uniqueIps'],
    suspiciousAttempts: value['suspiciousAttempts'],
    averageRiskScore: value['averageRiskScore'],
    periodStart: value['periodStart'].toISOString(),
    periodEnd: value['periodEnd'].toISOString(),
  };
}
