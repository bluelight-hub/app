/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.16
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { EtbAttachment } from "./EtbAttachment";
import {
  EtbAttachmentFromJSON, EtbAttachmentToJSON
} from "./EtbAttachment";
import type { EtbKategorie } from "./EtbKategorie";
import {
  EtbKategorieFromJSON, EtbKategorieToJSON
} from "./EtbKategorie";

/**
 *
 * @export
 * @interface EtbEntryDto
 */
export interface EtbEntryDto {
  /**
   * ID des ETB-Eintrags
   * @type {string}
   * @memberof EtbEntryDto
   */
  id: string;
  /**
   * Fortlaufende Nummer des ETB-Eintrags
   * @type {number}
   * @memberof EtbEntryDto
   */
  laufendeNummer: number;
  /**
   * Zeitpunkt der Erstellung
   * @type {Date}
   * @memberof EtbEntryDto
   */
  timestampErstellung: Date;
  /**
   * Zeitpunkt des Ereignisses
   * @type {Date}
   * @memberof EtbEntryDto
   */
  timestampEreignis: Date;
  /**
   * ID des Autors
   * @type {string}
   * @memberof EtbEntryDto
   */
  autorId: string;
  /**
   * Name des Autors
   * @type {string}
   * @memberof EtbEntryDto
   */
  autorName: string | null;
  /**
   * Rolle des Autors
   * @type {string}
   * @memberof EtbEntryDto
   */
  autorRolle: string | null;
  /**
   * Kategorie des Eintrags
   * @type {EtbKategorie}
   * @memberof EtbEntryDto
   */
  kategorie: EtbKategorie;
  /**
   * Inhalt des Eintrags
   * @type {string}
   * @memberof EtbEntryDto
   */
  inhalt: string;
  /**
   * Referenz zur Einsatz-ID
   * @type {string}
   * @memberof EtbEntryDto
   */
  referenzEinsatzId: string | null;
  /**
   * Referenz zur Patienten-ID
   * @type {string}
   * @memberof EtbEntryDto
   */
  referenzPatientId: string | null;
  /**
   * Referenz zur Einsatzmittel-ID
   * @type {string}
   * @memberof EtbEntryDto
   */
  referenzEinsatzmittelId: string | null;
  /**
   * Quelle des Eintrags
   * @type {string}
   * @memberof EtbEntryDto
   */
  systemQuelle: string | null;
  /**
   * Version des Eintrags
   * @type {number}
   * @memberof EtbEntryDto
   */
  version: number;
  /**
   * Gibt an, ob der Eintrag abgeschlossen ist
   * @type {boolean}
   * @memberof EtbEntryDto
   */
  istAbgeschlossen: boolean;
  /**
   * Zeitpunkt des Abschlusses
   * @type {Date}
   * @memberof EtbEntryDto
   */
  timestampAbschluss: Date | null;
  /**
   * ID der Person, die den Eintrag abgeschlossen hat
   * @type {string}
   * @memberof EtbEntryDto
   */
  abgeschlossenVon: string | null;
  /**
   * Status des Eintrags
   * @type {string}
   * @memberof EtbEntryDto
   */
  status: EtbEntryDtoStatusEnum | null;
  /**
   * Anlagen zum ETB-Eintrag
   * @type {Array<EtbAttachment>}
   * @memberof EtbEntryDto
   */
  anlagen?: Array<EtbAttachment>;
  /**
   * Absender des Eintrags (OPTA-Nummer)
   * @type {string}
   * @memberof EtbEntryDto
   */
  sender: string | null;
  /**
   * Empf√§nger des Eintrags (OPTA-Nummer)
   * @type {string}
   * @memberof EtbEntryDto
   */
  receiver: string;
}

/**
 * @export
 */
export const EtbEntryDtoStatusEnum = {
  Aktiv: "AKTIV",
  Ueberschrieben: "UEBERSCHRIEBEN",
} as const;
export type EtbEntryDtoStatusEnum =
  (typeof EtbEntryDtoStatusEnum)[keyof typeof EtbEntryDtoStatusEnum];

/**
 * Check if a given object implements the EtbEntryDto interface.
 */
export function instanceOfEtbEntryDto(value: object): value is EtbEntryDto {
  if (!("id" in value) || value["id"] === undefined) return false;
  if (!("laufendeNummer" in value) || value["laufendeNummer"] === undefined)
    return false;
  if (
    !("timestampErstellung" in value) ||
    value["timestampErstellung"] === undefined
  )
    return false;
  if (
    !("timestampEreignis" in value) ||
    value["timestampEreignis"] === undefined
  )
    return false;
  if (!("autorId" in value) || value["autorId"] === undefined) return false;
  if (!("autorName" in value) || value["autorName"] === undefined) return false;
  if (!("autorRolle" in value) || value["autorRolle"] === undefined)
    return false;
  if (!("kategorie" in value) || value["kategorie"] === undefined) return false;
  if (!("inhalt" in value) || value["inhalt"] === undefined) return false;
  if (
    !("referenzEinsatzId" in value) ||
    value["referenzEinsatzId"] === undefined
  )
    return false;
  if (
    !("referenzPatientId" in value) ||
    value["referenzPatientId"] === undefined
  )
    return false;
  if (
    !("referenzEinsatzmittelId" in value) ||
    value["referenzEinsatzmittelId"] === undefined
  )
    return false;
  if (!("systemQuelle" in value) || value["systemQuelle"] === undefined)
    return false;
  if (!("version" in value) || value["version"] === undefined) return false;
  if (!("istAbgeschlossen" in value) || value["istAbgeschlossen"] === undefined)
    return false;
  if (
    !("timestampAbschluss" in value) ||
    value["timestampAbschluss"] === undefined
  )
    return false;
  if (!("abgeschlossenVon" in value) || value["abgeschlossenVon"] === undefined)
    return false;
  if (!("status" in value) || value["status"] === undefined) return false;
  if (!("sender" in value) || value["sender"] === undefined) return false;
  if (!("receiver" in value) || value["receiver"] === undefined) return false;
  return true;
}

export function EtbEntryDtoFromJSON(json: any): EtbEntryDto {
  return EtbEntryDtoFromJSONTyped(json, false);
}

export function EtbEntryDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): EtbEntryDto {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"],
    laufendeNummer: json["laufendeNummer"],
    timestampErstellung: new Date(json["timestampErstellung"]),
    timestampEreignis: new Date(json["timestampEreignis"]),
    autorId: json["autorId"],
    autorName: json["autorName"],
    autorRolle: json["autorRolle"],
    kategorie: EtbKategorieFromJSON(json["kategorie"]),
    inhalt: json["inhalt"],
    referenzEinsatzId: json["referenzEinsatzId"],
    referenzPatientId: json["referenzPatientId"],
    referenzEinsatzmittelId: json["referenzEinsatzmittelId"],
    systemQuelle: json["systemQuelle"],
    version: json["version"],
    istAbgeschlossen: json["istAbgeschlossen"],
    timestampAbschluss:
      json["timestampAbschluss"] == null
        ? null
        : new Date(json["timestampAbschluss"]),
    abgeschlossenVon: json["abgeschlossenVon"],
    status: json["status"],
    anlagen:
      json["anlagen"] == null
        ? undefined
        : (json["anlagen"] as Array<any>).map(EtbAttachmentFromJSON),
    sender: json["sender"],
    receiver: json["receiver"],
  };
}

export function EtbEntryDtoToJSON(json: any): EtbEntryDto {
  return EtbEntryDtoToJSONTyped(json, false);
}

export function EtbEntryDtoToJSONTyped(
  value?: EtbEntryDto | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    laufendeNummer: value["laufendeNummer"],
    timestampErstellung: value["timestampErstellung"].toISOString(),
    timestampEreignis: value["timestampEreignis"].toISOString(),
    autorId: value["autorId"],
    autorName: value["autorName"],
    autorRolle: value["autorRolle"],
    kategorie: EtbKategorieToJSON(value["kategorie"]),
    inhalt: value["inhalt"],
    referenzEinsatzId: value["referenzEinsatzId"],
    referenzPatientId: value["referenzPatientId"],
    referenzEinsatzmittelId: value["referenzEinsatzmittelId"],
    systemQuelle: value["systemQuelle"],
    version: value["version"],
    istAbgeschlossen: value["istAbgeschlossen"],
    timestampAbschluss:
      value["timestampAbschluss"] == null
        ? null
        : (value["timestampAbschluss"] as any).toISOString(),
    abgeschlossenVon: value["abgeschlossenVon"],
    status: value["status"],
    anlagen:
      value["anlagen"] == null
        ? undefined
        : (value["anlagen"] as Array<any>).map(EtbAttachmentToJSON),
    sender: value["sender"],
    receiver: value["receiver"],
  };
}
