/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.16
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface PaginationMeta
 */
export interface PaginationMeta {
  /**
   * Aktuelle Seitennummer
   * @type {number}
   * @memberof PaginationMeta
   */
  currentPage: number;
  /**
   * Anzahl der Einträge pro Seite
   * @type {number}
   * @memberof PaginationMeta
   */
  itemsPerPage: number;
  /**
   * Gesamtzahl der Einträge
   * @type {number}
   * @memberof PaginationMeta
   */
  totalItems: number;
  /**
   * Gesamtzahl der Seiten
   * @type {number}
   * @memberof PaginationMeta
   */
  totalPages: number;
  /**
   * Gibt an, ob es eine nächste Seite gibt
   * @type {boolean}
   * @memberof PaginationMeta
   */
  hasNextPage: boolean;
  /**
   * Gibt an, ob es eine vorherige Seite gibt
   * @type {boolean}
   * @memberof PaginationMeta
   */
  hasPreviousPage: boolean;
}

/**
 * Check if a given object implements the PaginationMeta interface.
 */
export function instanceOfPaginationMeta(
  value: object,
): value is PaginationMeta {
  if (!("currentPage" in value) || value["currentPage"] === undefined)
    return false;
  if (!("itemsPerPage" in value) || value["itemsPerPage"] === undefined)
    return false;
  if (!("totalItems" in value) || value["totalItems"] === undefined)
    return false;
  if (!("totalPages" in value) || value["totalPages"] === undefined)
    return false;
  if (!("hasNextPage" in value) || value["hasNextPage"] === undefined)
    return false;
  if (!("hasPreviousPage" in value) || value["hasPreviousPage"] === undefined)
    return false;
  return true;
}

export function PaginationMetaFromJSON(json: any): PaginationMeta {
  return PaginationMetaFromJSONTyped(json, false);
}

export function PaginationMetaFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): PaginationMeta {
  if (json == null) {
    return json;
  }
  return {
    currentPage: json["currentPage"],
    itemsPerPage: json["itemsPerPage"],
    totalItems: json["totalItems"],
    totalPages: json["totalPages"],
    hasNextPage: json["hasNextPage"],
    hasPreviousPage: json["hasPreviousPage"],
  };
}

export function PaginationMetaToJSON(json: any): PaginationMeta {
  return PaginationMetaToJSONTyped(json, false);
}

export function PaginationMetaToJSONTyped(
  value?: PaginationMeta | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    currentPage: value["currentPage"],
    itemsPerPage: value["itemsPerPage"],
    totalItems: value["totalItems"],
    totalPages: value["totalPages"],
    hasNextPage: value["hasNextPage"],
    hasPreviousPage: value["hasPreviousPage"],
  };
}
