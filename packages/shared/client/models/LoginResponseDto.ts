/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthUserDto } from './AuthUserDto';
import {
  AuthUserDtoFromJSON,
  AuthUserDtoFromJSONTyped,
  AuthUserDtoToJSON,
  AuthUserDtoToJSONTyped,
} from './AuthUserDto';

/**
 *
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
  /**
   * JWT access token
   * @type {string}
   * @memberof LoginResponseDto
   */
  accessToken: string;
  /**
   * JWT refresh token
   * @type {string}
   * @memberof LoginResponseDto
   */
  refreshToken: string;
  /**
   * Authenticated user information
   * @type {AuthUserDto}
   * @memberof LoginResponseDto
   */
  user: AuthUserDto;
  /**
   * Whether MFA verification is required
   * @type {boolean}
   * @memberof LoginResponseDto
   */
  requiresMfa?: boolean;
  /**
   * MFA challenge ID for verification
   * @type {string}
   * @memberof LoginResponseDto
   */
  mfaChallengeId?: string;
}

/**
 * Check if a given object implements the LoginResponseDto interface.
 */
export function instanceOfLoginResponseDto(value: object): value is LoginResponseDto {
  if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
  if (!('refreshToken' in value) || value['refreshToken'] === undefined) return false;
  if (!('user' in value) || value['user'] === undefined) return false;
  return true;
}

export function LoginResponseDtoFromJSON(json: any): LoginResponseDto {
  return LoginResponseDtoFromJSONTyped(json, false);
}

export function LoginResponseDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): LoginResponseDto {
  if (json == null) {
    return json;
  }
  return {
    accessToken: json['accessToken'],
    refreshToken: json['refreshToken'],
    user: AuthUserDtoFromJSON(json['user']),
    requiresMfa: json['requiresMfa'] == null ? undefined : json['requiresMfa'],
    mfaChallengeId: json['mfaChallengeId'] == null ? undefined : json['mfaChallengeId'],
  };
}

export function LoginResponseDtoToJSON(json: any): LoginResponseDto {
  return LoginResponseDtoToJSONTyped(json, false);
}

export function LoginResponseDtoToJSONTyped(
  value?: LoginResponseDto | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    accessToken: value['accessToken'],
    refreshToken: value['refreshToken'],
    user: AuthUserDtoToJSON(value['user']),
    requiresMfa: value['requiresMfa'],
    mfaChallengeId: value['mfaChallengeId'],
  };
}
