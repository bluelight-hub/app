/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface AuthUserDto
 */
export interface AuthUserDto {
  /**
   * User ID
   * @type {string}
   * @memberof AuthUserDto
   */
  id: string;
  /**
   * User email address
   * @type {string}
   * @memberof AuthUserDto
   */
  email: string;
  /**
   * User roles
   * @type {Array<string>}
   * @memberof AuthUserDto
   */
  roles: Array<AuthUserDtoRolesEnum>;
  /**
   * User permissions
   * @type {Array<string>}
   * @memberof AuthUserDto
   */
  permissions: Array<string>;
  /**
   * Whether user is active
   * @type {boolean}
   * @memberof AuthUserDto
   */
  isActive: boolean;
  /**
   * User creation date
   * @type {Date}
   * @memberof AuthUserDto
   */
  createdAt: Date;
  /**
   * User last update date
   * @type {Date}
   * @memberof AuthUserDto
   */
  updatedAt: Date;
}

/**
 * @export
 */
export const AuthUserDtoRolesEnum = {
  SuperAdmin: 'SUPER_ADMIN',
  Admin: 'ADMIN',
  Support: 'SUPPORT',
  User: 'USER',
} as const;
export type AuthUserDtoRolesEnum = (typeof AuthUserDtoRolesEnum)[keyof typeof AuthUserDtoRolesEnum];

/**
 * Check if a given object implements the AuthUserDto interface.
 */
export function instanceOfAuthUserDto(value: object): value is AuthUserDto {
  if (!('id' in value) || value['id'] === undefined) return false;
  if (!('email' in value) || value['email'] === undefined) return false;
  if (!('roles' in value) || value['roles'] === undefined) return false;
  if (!('permissions' in value) || value['permissions'] === undefined) return false;
  if (!('isActive' in value) || value['isActive'] === undefined) return false;
  if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
  if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
  return true;
}

export function AuthUserDtoFromJSON(json: any): AuthUserDto {
  return AuthUserDtoFromJSONTyped(json, false);
}

export function AuthUserDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthUserDto {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'],
    email: json['email'],
    roles: json['roles'],
    permissions: json['permissions'],
    isActive: json['isActive'],
    createdAt: new Date(json['createdAt']),
    updatedAt: new Date(json['updatedAt']),
  };
}

export function AuthUserDtoToJSON(json: any): AuthUserDto {
  return AuthUserDtoToJSONTyped(json, false);
}

export function AuthUserDtoToJSONTyped(
  value?: AuthUserDto | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    email: value['email'],
    roles: value['roles'],
    permissions: value['permissions'],
    isActive: value['isActive'],
    createdAt: value['createdAt'].toISOString(),
    updatedAt: value['updatedAt'].toISOString(),
  };
}
