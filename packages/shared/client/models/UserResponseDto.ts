/* tslint:disable */
/* eslint-disable */
/**
 * BlueLight Hub API
 * BlueLight Hub API for the BlueLight Hub application
 *
 * The version of the OpenAPI document: 1.0.0-alpha.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface UserResponseDto
 */
export interface UserResponseDto {
  /**
   * Eindeutige ID des Benutzers
   * @type {string}
   * @memberof UserResponseDto
   */
  id: string;
  /**
   * Benutzername
   * @type {string}
   * @memberof UserResponseDto
   */
  username: string;
  /**
   * Rolle des Benutzers
   * @type {string}
   * @memberof UserResponseDto
   */
  role: UserResponseDtoRoleEnum;
  /**
   * Gibt an, ob der Benutzer aktiv ist
   * @type {boolean}
   * @memberof UserResponseDto
   */
  isActive: boolean;
  /**
   * Zeitpunkt der letzten Anmeldung
   * @type {Date}
   * @memberof UserResponseDto
   */
  lastLoginAt?: Date | null;
  /**
   * Zeitpunkt der Erstellung
   * @type {Date}
   * @memberof UserResponseDto
   */
  createdAt: Date;
  /**
   * Zeitpunkt der letzten Aktualisierung
   * @type {Date}
   * @memberof UserResponseDto
   */
  updatedAt: Date;
}

/**
 * @export
 */
export const UserResponseDtoRoleEnum = {
  SuperAdmin: 'SUPER_ADMIN',
  Admin: 'ADMIN',
  User: 'USER',
} as const;
export type UserResponseDtoRoleEnum =
  (typeof UserResponseDtoRoleEnum)[keyof typeof UserResponseDtoRoleEnum];

/**
 * Check if a given object implements the UserResponseDto interface.
 */
export function instanceOfUserResponseDto(value: object): value is UserResponseDto {
  if (!('id' in value) || value['id'] === undefined) return false;
  if (!('username' in value) || value['username'] === undefined) return false;
  if (!('role' in value) || value['role'] === undefined) return false;
  if (!('isActive' in value) || value['isActive'] === undefined) return false;
  if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
  if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
  return true;
}

export function UserResponseDtoFromJSON(json: any): UserResponseDto {
  return UserResponseDtoFromJSONTyped(json, false);
}

export function UserResponseDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): UserResponseDto {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'],
    username: json['username'],
    role: json['role'],
    isActive: json['isActive'],
    lastLoginAt: json['lastLoginAt'] == null ? undefined : new Date(json['lastLoginAt']),
    createdAt: new Date(json['createdAt']),
    updatedAt: new Date(json['updatedAt']),
  };
}

export function UserResponseDtoToJSON(json: any): UserResponseDto {
  return UserResponseDtoToJSONTyped(json, false);
}

export function UserResponseDtoToJSONTyped(
  value?: UserResponseDto | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    username: value['username'],
    role: value['role'],
    isActive: value['isActive'],
    lastLoginAt:
      value['lastLoginAt'] == null ? undefined : (value['lastLoginAt'] as any).toISOString(),
    createdAt: value['createdAt'].toISOString(),
    updatedAt: value['updatedAt'].toISOString(),
  };
}
