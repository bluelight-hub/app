// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EtbKategorie {
  LAGEMELDUNG
  MELDUNG
  ANFORDERUNG
  KORREKTUR
  AUTO_KRAEFTE
  AUTO_PATIENTEN
  AUTO_TECHNISCH
  AUTO_SONSTIGES
}

enum EtbEntryStatus {
  AKTIV
  UEBERSCHRIEBEN
}

model Einsatz {
  id          String    @id @default(nanoid())
  name        String    @unique @db.VarChar(255)
  beschreibung String?  @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  etbEntries  EtbEntry[]

  // Postgres-specific constraints and indexes
  @@index([createdAt], map: "idx_einsatz_created_at")
  @@index([name, createdAt], map: "idx_einsatz_name_created_at")
}

model EtbEntry {
  id                      String           @id @default(nanoid())
  laufendeNummer          Int
  timestampErstellung     DateTime
  timestampEreignis       DateTime
  autorId                 String           @db.VarChar(255)
  autorName               String?          @db.VarChar(255)
  autorRolle              String?          @db.VarChar(100)
  kategorie               EtbKategorie
  inhalt                  String           @db.Text
  referenzEinsatzId       String
  einsatz                 Einsatz          @relation(fields: [referenzEinsatzId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  referenzPatientId       String?          @db.VarChar(255)
  referenzEinsatzmittelId String?          @db.VarChar(255)
  systemQuelle            String?          @db.VarChar(100)
  version                 Int              @default(1)
  status                  EtbEntryStatus   @default(AKTIV)
  istAbgeschlossen        Boolean          @default(false)
  timestampAbschluss      DateTime?
  abgeschlossenVon        String?          @db.VarChar(255)
  ueberschriebenDurch     EtbEntry?        @relation("UeberschriebenDurch", fields: [ueberschriebenDurchId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  ueberschriebenDurchId   String?
  ueberschriebeneEintraege EtbEntry[]      @relation("UeberschriebenDurch")
  timestampUeberschrieben DateTime?
  ueberschriebenVon       String?          @db.VarChar(255)
  anlagen                 EtbAttachment[]
  sender                  String?          @db.VarChar(255)
  receiver                String?          @db.VarChar(255)

  // Postgres-specific constraints and indexes
  @@unique([referenzEinsatzId, laufendeNummer], map: "uk_etb_entry_einsatz_laufende_nummer")
  @@index([referenzEinsatzId, timestampErstellung], map: "idx_etb_entry_einsatz_timestamp")
  @@index([kategorie, status], map: "idx_etb_entry_kategorie_status")
  @@index([autorId, timestampErstellung], map: "idx_etb_entry_autor_timestamp")
  @@index([timestampEreignis], map: "idx_etb_entry_ereignis_timestamp")
}

model EtbAttachment {
  id          String   @id @default(nanoid())
  etbEntryId  String
  etbEntry    EtbEntry @relation(fields: [etbEntryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dateiname   String   @db.VarChar(255)
  dateityp    String   @db.VarChar(50)
  speicherOrt String   @db.VarChar(500)
  beschreibung String? @db.Text

  // Postgres-specific constraints and indexes
  @@index([etbEntryId], map: "idx_etb_attachment_entry_id")
  @@index([dateityp], map: "idx_etb_attachment_dateityp")
}

// ===== USER AUTHENTICATION SYSTEM =====
// User authentication system for all users including admins

enum UserRole {
  SUPER_ADMIN
  ADMIN
  SUPPORT
  USER
}

enum Permission {
  // User management
  USERS_READ
  USERS_WRITE
  USERS_DELETE
  
  // System settings
  SYSTEM_SETTINGS_READ
  SYSTEM_SETTINGS_WRITE
  
  // Audit logs
  AUDIT_LOG_READ
  
  // Role management
  ROLE_MANAGE
  
  // Application permissions
  ETB_READ
  ETB_WRITE
  ETB_DELETE
  EINSATZ_READ
  EINSATZ_WRITE
  EINSATZ_DELETE
}

model User {
  id                String              @id @default(nanoid())
  email             String              @unique @db.VarChar(255)
  username          String              @unique @db.VarChar(100)
  passwordHash      String              @db.Text
  role              UserRole            @default(USER)
  isActive          Boolean             @default(true)
  lastLoginAt       DateTime?
  failedLoginCount  Int                 @default(0)
  lockedUntil       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relations
  sessions          Session[]
  refreshTokens     RefreshToken[]
  rolePermissions   RolePermission[]
  
  // Indexes
  @@index([email], map: "idx_user_email")
  @@index([role, isActive], map: "idx_user_role_active")
  @@index([lastLoginAt], map: "idx_user_last_login")
}

model Session {
  id               String      @id @default(nanoid())
  jti              String      @unique // JWT ID for tracking
  userId           String
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress        String?     @db.VarChar(45) // Supports IPv6
  userAgent        String?     @db.Text
  lastActivityAt   DateTime    @default(now())
  expiresAt        DateTime
  isRevoked        Boolean     @default(false)
  revokedAt        DateTime?
  revokedReason    String?     @db.VarChar(255)
  createdAt        DateTime    @default(now())
  
  // Indexes for session management
  @@index([userId, isRevoked], map: "idx_session_user_active")
  @@index([jti], map: "idx_session_jti")
  @@index([expiresAt, isRevoked], map: "idx_session_expiry")
}

model RefreshToken {
  id               String      @id @default(nanoid())
  token            String      @unique @db.Text
  userId           String
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionJti       String?     // Link to session JWT ID
  expiresAt        DateTime
  isUsed           Boolean     @default(false)
  usedAt           DateTime?
  isRevoked        Boolean     @default(false)
  revokedAt        DateTime?
  createdAt        DateTime    @default(now())
  
  // Indexes
  @@index([token], map: "idx_refresh_token")
  @@index([userId, isRevoked, isUsed], map: "idx_refresh_user_status")
  @@index([expiresAt], map: "idx_refresh_expiry")
}

model RolePermission {
  id               String           @id @default(nanoid())
  role             UserRole
  permission       Permission
  grantedBy        String?          // User ID who granted this permission
  grantedByUser    User?            @relation(fields: [grantedBy], references: [id], onDelete: SetNull)
  grantedAt        DateTime         @default(now())
  
  // Unique constraint - one permission per role
  @@unique([role, permission], map: "uk_role_permission")
  @@index([role], map: "idx_role_permission_role")
}
