/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminSetupRouteImport } from './routes/admin/setup'
import { Route as AdminLoginRouteImport } from './routes/admin/login'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminSetupRoute = AdminSetupRouteImport.update({
  id: '/admin/setup',
  path: '/admin/setup',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminLoginRoute = AdminLoginRouteImport.update({
  id: '/admin/login',
  path: '/admin/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/login': typeof AdminLoginRoute
  '/admin/setup': typeof AdminSetupRoute
  '/admin/users': typeof AdminUsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/login': typeof AdminLoginRoute
  '/admin/setup': typeof AdminSetupRoute
  '/admin/users': typeof AdminUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/login': typeof AdminLoginRoute
  '/admin/setup': typeof AdminSetupRoute
  '/admin/users': typeof AdminUsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/admin/dashboard'
    | '/admin/login'
    | '/admin/setup'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/admin/dashboard'
    | '/admin/login'
    | '/admin/setup'
    | '/admin/users'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/admin/dashboard'
    | '/admin/login'
    | '/admin/setup'
    | '/admin/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminLoginRoute: typeof AdminLoginRoute
  AdminSetupRoute: typeof AdminSetupRoute
  AdminUsersRoute: typeof AdminUsersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/setup': {
      id: '/admin/setup'
      path: '/admin/setup'
      fullPath: '/admin/setup'
      preLoaderRoute: typeof AdminSetupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/login': {
      id: '/admin/login'
      path: '/admin/login'
      fullPath: '/admin/login'
      preLoaderRoute: typeof AdminLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminLoginRoute: AdminLoginRoute,
  AdminSetupRoute: AdminSetupRoute,
  AdminUsersRoute: AdminUsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
